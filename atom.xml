<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>施振宇的博客</title>
  <subtitle>技术&amp;生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jerryshi.com/"/>
  <updated>2017-06-02T06:45:18.641Z</updated>
  <id>http://jerryshi.com/</id>
  
  <author>
    <name>Jerry Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【笔记】珠峰前端全栈培训第二周：call/apply/表格排序/正则</title>
    <link href="http://jerryshi.com/2017/06/02/zhufeng-fe-fullstack-02/"/>
    <id>http://jerryshi.com/2017/06/02/zhufeng-fe-fullstack-02/</id>
    <published>2017-06-02T06:26:00.000Z</published>
    <updated>2017-06-02T06:45:18.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="课时21：函数的三种角色"><a href="#课时21：函数的三种角色" class="headerlink" title="课时21：函数的三种角色"></a>课时21：函数的三种角色</h3><p><img src="http://ofx24fene.bkt.clouddn.com//img/book/prototype-chain-final.svg" alt="prototype-chain-final"></p>
<ul>
<li>函数本身也会有一些自己的属性：<ul>
<li>length:0   形参个数</li>
<li>name:”Fn”  函数名称</li>
<li>prototype: 类的原型，在原型上定义的方法都是当前Fn这个类实例的共有方法</li>
<li>__proto__: 把函数当做一个普通的对象，指向Function这个类的原型</li>
</ul>
</li>
</ul>
<h4 id="函数是整个JS中最复杂也是最重要的知识点"><a href="#函数是整个JS中最复杂也是最重要的知识点" class="headerlink" title="函数是整个JS中最复杂也是最重要的知识点"></a>函数是整个JS中最复杂也是最重要的知识点</h4><ul>
<li>函数存在多面性<ul>
<li>“普通函数”：它本身就是一个普通函数，执行时会形成私有作用域(闭包)-&gt;形参赋值-&gt;预解释-&gt;代码执行，执行完成后栈内存销毁或不销毁</li>
<li>”类“：它有自己的实例，也有一个叫做<code>prototype</code>属性是自己的原型，它的实例都可以执行自己的原型</li>
<li>”普通对象“：和<code>var obj = {}</code>中的obj一样，就是一个普通的对象，他作为对象可以有一些自己的私有属性，也可以通过<code>__proto__</code>找到<code>Function.prototype</code></li>
</ul>
</li>
</ul>
<h4 id="小例子一枚充分说明函数的三面性"><a href="#小例子一枚充分说明函数的三面性" class="headerlink" title="小例子一枚充分说明函数的三面性"></a>小例子一枚充分说明函数的三面性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">10</span></div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">&#125;</div><div class="line">Fn.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line">Fn.aaa = <span class="number">1000</span></div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn</div><div class="line">f.num <span class="comment">// -&gt; undefined, 因为在构造函数中声明的num仅是私有作用域中的一个变量</span></div><div class="line">f.aaa <span class="comment">// -&gt; undefined, aaa是Fn这个对象的私有属性，实例取不到</span></div><div class="line"><span class="keyword">var</span> res = Fn()   <span class="comment">// 使用Fn的堆内存开辟一个私有作用域，里面有num哦🙃</span></div><div class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 函数没返回值，当然也是undefined😎</span></div><div class="line">Fn.aaa</div></pre></td></tr></table></figure>
<hr>
<h3 id="课时22：call方法深入"><a href="#课时22：call方法深入" class="headerlink" title="课时22：call方法深入"></a>课时22：call方法深入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myAry.slice <span class="comment">// -&gt; 让从原型链上找到的slice方法先执行，在执行时，才把myAry数组进行截取等操作</span></div></pre></td></tr></table></figure>
<h4 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var obj = &#123; name:&quot;jerryshi.com&quot; &#125;</div><div class="line">function fn () &#123; console.log(this) &#125;</div><div class="line">fn() // -&gt; 此时this被window对象代替</div><div class="line">obj.fn() // -&gt; 报错！</div><div class="line">fn.call(obj)</div></pre></td></tr></table></figure>
<ul>
<li>call方法的作用：首先我们让原型上的call方法执行，在执行call方法时，我们让fn方法中的this变为第一个参数值obj，然后再把fn这个函数执行。简单来说，call方法就是改变方法里的this关键字。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;课时21：函数的三种角色&quot;&gt;&lt;a href=&quot;#课时21：函数的三种角色&quot; class=&quot;headerlink&quot; title=&quot;课时21：函数的三种角色&quot;&gt;&lt;/a&gt;课时21：函数的三种角色&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ofx24fene.bkt
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
      <category term="笔记" scheme="http://jerryshi.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>javascript dom 基础 ---- 关于dom元素修改小例子解析</title>
    <link href="http://jerryshi.com/2017/05/31/js-dom-base-text-class/"/>
    <id>http://jerryshi.com/2017/05/31/js-dom-base-text-class/</id>
    <published>2017-05-31T13:57:24.000Z</published>
    <updated>2017-05-31T13:57:34.491Z</updated>
    
    <content type="html"><![CDATA[<p>例子出处：<a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener" target="_blank" rel="external">https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Function to change the content of t2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">modifyText</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> t2 = <span class="built_in">document</span>.getElementById(<span class="string">"t2"</span>);</div><div class="line">  <span class="keyword">if</span> (t2.firstChild.nodeValue == <span class="string">"three"</span>) &#123;</div><div class="line">    t2.firstChild.nodeValue = <span class="string">"two"</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    t2.firstChild.nodeValue = <span class="string">"three"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// add event listener to table</span></div><div class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"outside"</span>);</div><div class="line">el.addEventListener(<span class="string">"click"</span>, modifyText, <span class="literal">false</span>);</div></pre></td></tr></table></figure>
<p>在例子中，我发现大牛竟然直接用<code>nodeValue</code>修改值，真低端，哥一般都用<code>innerHTML</code>，来走一个试试。纳尼！报错，说<code>t2.firstChild</code>没有<code>innerHTML</code>属性！</p>
<p>解析：</p>
<p>首先，我们先看下到底是谁调用了<code>nodeValue</code>这个属性，原来是一个Text的实例对象调用的，那Text到底有没<code>innerHTML</code>呢？答案是没有。Text类原型继承自Node，连跳两级HTMLElement和Element类。故问题的答案就是Text类的实例是没有innerHTML的。</p>
<p>其次，取node对象时，大牛们直接取到了目标操作对象（那个文本）,方法是从父级node对象（firstChild取到的是Node对象，包括了Element，毕竟Element都原型继承自Node类）上用<code>.firstChild</code>获取text对象，注意这里text里是没有<code>firstElementChild</code>属性的，毕竟Text原型链上又没<code>Element</code>。取到目标对象直接修改完成！当然<code>t2.firstChild.nodeValue</code>可以改成<code>t2.innerHTML</code>来实现，但这个不够深入嘛。</p>
<p>最后，从这个例子中，鄙人隐约感觉到大牛深深的鄙视，如是说：“小伙，你明明就是要去那个文字，干嘛拿它父级元素改”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;例子出处：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://devel
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【笔记】珠峰前端全栈培训第一周：作用域深入和面向对象编程</title>
    <link href="http://jerryshi.com/2017/05/28/zhufeng-fe-fullstack-01/"/>
    <id>http://jerryshi.com/2017/05/28/zhufeng-fe-fullstack-01/</id>
    <published>2017-05-27T16:15:00.000Z</published>
    <updated>2017-06-02T06:44:47.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="课时1：预解释"><a href="#课时1：预解释" class="headerlink" title="课时1：预解释"></a>课时1：预解释</h3><blockquote>
<p>基本数据类型：number、string、Boolean、null、undefined;<br>引用数据类型：object（{}、[]、/^$/、Date）、function</p>
</blockquote>
<ul>
<li><p>当浏览器加载HTML页面的时候，首先会提供一个供全局JS代码执行的环境-&gt;全局作用域（global/window），window不仅代表当前浏览器窗口对象还代表全局作用域</p>
</li>
<li><p>JS中定义一个函数时，首先引擎会先在内存开辟一个内存空间，然后把函数体内的代码当做<strong>字符串</strong>存入内存空间，最后把块内存的地址赋值给函数名。</p>
</li>
<li><p>预解释：在当前作用域中，JS代码执行之前，浏览器会首先默认把所有带var和function的进行提前声明或定义。</p>
<ul>
<li>理解定义和声明：<br>声明（declare）：var num; -&gt; 告诉浏览器在全局作用域中有一个num的变量了，默认值undefined<br>定义（defined）：num = 12; -&gt; 给我们声明的变量赋值</li>
<li>对于带var和function关键字的在预解释时还是不一样的<br>var -&gt; 在预解释时只提前声明<br>function -&gt; 在预解释时提前的声明和定义都完成了</li>
<li>预解释只发生在当前的作用域下，例如：开始只对window下的进行预解释，只有函数运行时才会对函数中的进行预解释</li>
</ul>
</li>
<li><p>JS中内存的分类<br>栈内存：用来提供一个供JS代码提供的环境 -&gt; 作用域（全局作用域、私有作用域），预解释发生在栈内存当中;<br>堆内存：用来存储引用数据的值 -&gt; 对象存储的属性名和属性值，函数存储的是代码字符串;  </p>
</li>
<li><p>如何区分私有变量和全局变量？</p>
<ul>
<li>在全局作用域下声明（预解释的时候）的变量是全局变量</li>
<li>在“私有作用域中声明的变量”和“函数的形参”都是私有变量</li>
<li>在私有作用域中，我们的代码执行时遇到了一个变量，首先我们需要确定它是否为私有变量，如果是，则和外面作用域的变量没有任何关系；如果不是私有的，则往当前作用域的上级作用域进行查找，如果上级作用域也没有则继续往上查看，一直找到windows全局位置（作用域链）。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="课时2：作用域链"><a href="#课时2：作用域链" class="headerlink" title="课时2：作用域链"></a>课时2：作用域链</h3><ul>
<li>当函数执行的时候（直接目的：让函数体中的代码执行），首先会形成一个新的私有的作用域，然后按如下步骤执行：<ul>
<li>如果有形参，先给形参赋值</li>
<li>进行私有作用域的预解释</li>
<li>私有作用域中的代码从上到下执行</li>
<li>函数形参的一个新的私有变量保护了里面的私有变量不受外界的干扰（外面修改不了私有的，私有的也修改不了外面的）–&gt; “闭包”</li>
</ul>
</li>
</ul>
<hr>
<h3 id="课时3：全局变量的细节问题"><a href="#课时3：全局变量的细节问题" class="headerlink" title="课时3：全局变量的细节问题"></a>课时3：全局变量的细节问题</h3><ul>
<li><p>私有作用域中出现的一个变量不是私有的，则往上级作用域进行查找，上级作用域没有则继续往上级查找，一直找到window为止，如果window下也没有则：</p>
<ul>
<li>若是获取值：console.log(total) -&gt; 报错！</li>
<li>若是设置值：total = 100  -&gt; 相当于给window增加了一个属性并赋值</li>
</ul>
</li>
<li><p>在JS中，在不进行任何特殊处理的情况下，上面的代码报错，下面的代码都不再执行</p>
</li>
</ul>
<hr>
<h3 id="课时4：预解释是一种毫无节操的机制"><a href="#课时4：预解释是一种毫无节操的机制" class="headerlink" title="课时4：预解释是一种毫无节操的机制"></a>课时4：预解释是一种毫无节操的机制</h3><blockquote>
<p>自从学了预解释，从此节操是路人</p>
</blockquote>
<ul>
<li>预解释时，只要用<code>var</code>声明的变量，不管所在的条件语块是否成立，统统提前声明</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!(<span class="string">"num"</span> <span class="keyword">in</span> <span class="built_in">window</span>)) &#123; <span class="comment">// -&gt;(!true) -&gt; false</span></div><div class="line">  <span class="keyword">var</span> num = <span class="number">12</span>  <span class="comment">// 不执行赋值操作，但得预解释给window声明属性window.num</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(num) <span class="comment">// -&gt; undefined ★</span></div></pre></td></tr></table></figure>
<ul>
<li>预解释的时候只对‘=’左边的表达式预解释，不对‘=’的值进行预解释！匿名函数之函数表达式：把函数定义的部分当做一个值赋值给我们的变量、元素的某一个事件。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fn1()  <span class="comment">// -&gt; undefined() -&gt; Uncaught TypeError: fn1 is not a function</span></div><div class="line"><span class="keyword">var</span> fn1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn2()  <span class="comment">// -&gt; ok</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</div><div class="line">&#125;</div><div class="line">fn2()  <span class="comment">// ok</span></div></pre></td></tr></table></figure>
<blockquote>
<p>个人建议使用fn1函数之函数表达式定义函数，这样的好处是，函数只在代码下方执行，如果函数报错，只需要网上查即可。</p>
</blockquote>
<ul>
<li>执行函数定义的那个function在全局作用域下不进行代码预解释，当代码执行到这个位置时定义和执行一起完成了。自执行函数：定义和执行一起完成了</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;&#125;)(<span class="number">100</span>);</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;&#125;(<span class="number">100</span>);</div><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;&#125;(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<ul>
<li>函数体中<code>return</code>下面的代码虽然不执行了，但是需要进行预解释；<code>return</code>后面跟着的都是我们的返回值，所以不进行预解释；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">100</span></div><div class="line">&#125;</div><div class="line">fn()</div></pre></td></tr></table></figure>
<ul>
<li>在预解释时，如果名字已经声明过了，则不会重新再声明，但会重新赋值；在JS中，如果变量名和函数名重复了，也会覆盖！</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// window预解释执行步骤</span></div><div class="line"><span class="comment">// 声明+定义 fn = x000ff11</span></div><div class="line"><span class="comment">// 声明var fn （不会重复声明，覆盖老的fn）</span></div><div class="line"><span class="comment">// 声明（不会重复声明）+定义 fn = 0x000ff22</span></div><div class="line"><span class="comment">// -&gt; fn = 0x000ff22</span></div><div class="line">fn()  <span class="comment">// -&gt; 2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</div><div class="line">fn()  <span class="comment">// -&gt; 2</span></div><div class="line"><span class="keyword">var</span> fn = <span class="number">10</span></div><div class="line">fn()  <span class="comment">// -&gt; 10() -&gt; Error: fn is not a function</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</div><div class="line">fn() <span class="comment">// 不执行了！</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时5：如何查找上级作用域"><a href="#课时5：如何查找上级作用域" class="headerlink" title="课时5：如何查找上级作用域"></a>课时5：如何查找上级作用域</h3><a id="more"></a>
<ul>
<li>如何查找上级作用域？</li>
</ul>
<blockquote>
<p>看当前函数是在哪个作用域下定义的，那么它的上级作用域就是谁。–&gt;和函数在哪执行没有任何关系</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">12</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">120</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(num)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn()</div><div class="line">f()</div><div class="line"></div><div class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">1200</span></div><div class="line">  fn()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/book/Scop-Chain.svg" alt="Scop_Chain"></p>
<hr>
<h3 id="课时6：关于内存释放和作用域销毁的研究"><a href="#课时6：关于内存释放和作用域销毁的研究" class="headerlink" title="课时6：关于内存释放和作用域销毁的研究"></a>课时6：关于内存释放和作用域销毁的研究</h3><ul>
<li>堆内存：对象数据类型或者函数数据类型在定义时首先都会开辟一个堆内存，堆内存有一个引用地址，如果外面有变量等知道了这个地址，我们就说这个内存被占用了，就不能销毁了；如果我们想要让堆内存释放/销毁，只需把所有引用它的变量值赋值为null即可，如果当前的堆内存没有被任何东西占用了，那么引擎就会在空闲的时候把它销毁</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">'阿飞'</span> &#125;</div><div class="line"><span class="keyword">var</span> obj2 = obj1</div><div class="line"></div><div class="line">obj1 = <span class="literal">null</span></div><div class="line">obk2 = <span class="literal">null</span></div></pre></td></tr></table></figure>
<ul>
<li>栈内存：说白了就是作用域<ul>
<li>全局作用域：只有当页面关闭时全局作用于才会销毁</li>
<li>私有作用域：只有函数执行会产生私有作用域。一半情况下，函数执行会形成私有作用域，当私有作用域中的代码执行完成后，我们当前作用域都会主动的进行释放和销毁。但还会有特俗情况：当前私有作用域中的部分内存被作用域以外的东西被占用了，那么当前这个作用域就不能销毁了。</li>
<li>私有作用域不销毁情况：a、函数执行返回了一个引用类型的值，并且在函数外被一个其他东西给接收了，这种情况下一般形成的私有作用域都不会被销毁；</li>
<li>私有作用域不销毁情况：b、在一个私有作用域中给DOM元素的事件绑定方法，一般情况下我们的私有作用域都不销毁</li>
<li>私有作用域不销毁情况：c、fn返回的函数没有被其他东西占用，但是还需要执行一次呢，所以暂时不销毁，当返回的执行完成后，浏览器会在空闲时把它销毁。 –&gt; 不立即销毁</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 情况a</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">100</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn() <span class="comment">// fn执行后形成的这个私有作用域就不能被销毁了</span></div><div class="line"></div><div class="line"><span class="comment">// 情况b</span></div><div class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementbyId(<span class="string">"div1"</span>)</div><div class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  oDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  &#125;</div><div class="line">&#125; ()   <span class="comment">// 当前自定义函数形成的私有作用域也不销毁</span></div><div class="line"></div><div class="line"><span class="comment">// 情况c</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num  = <span class="number">100</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">&#125;</div><div class="line">fn()() <span class="comment">// 首先执行fn，返回一个小函数对应的内存地址，然后紧接着让返回的小函数再执行</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时7：作用域练习题"><a href="#课时7：作用域练习题" class="headerlink" title="课时7：作用域练习题"></a>课时7：作用域练习题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">10</span></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n + (++i))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn()</div><div class="line">f(<span class="number">10</span>)  <span class="comment">// -&gt; 21</span></div><div class="line">f(<span class="number">20</span>)  <span class="comment">// -&gt; 32</span></div><div class="line">fn()(<span class="number">10</span>)  <span class="comment">// -&gt; 21</span></div><div class="line">fn()(<span class="number">20</span>)  <span class="comment">// -&gt; 31</span></div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/chain-pro.svg" alt="chain01"></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n + (i++))</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = fn(<span class="number">13</span>)</div><div class="line">f(<span class="number">12</span>)  <span class="comment">// -&gt; 24</span></div><div class="line">f(<span class="number">14</span>)  <span class="comment">// -&gt; 29</span></div><div class="line">fn(<span class="number">15</span>)(<span class="number">12</span>)  <span class="comment">// -&gt; 27</span></div><div class="line">fn(<span class="number">16</span>)(<span class="number">13</span>)  <span class="comment">// -&gt; 29</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时8：this关键字"><a href="#课时8：this关键字" class="headerlink" title="课时8：this关键字"></a>课时8：this关键字</h3><ul>
<li>JS中的this代表的是当前行为执行的主体。我们一般在JS中主要研究的都是函数中的this。</li>
<li>JS中的context代表的是当前执行的环境（区域）</li>
<li>this是谁和函数在哪里定义的和在哪执行的都没任何关系；如何区分this呢？<ul>
<li>函数执行时，如果函数名前有<code>.</code>的话，<code>.</code>前面是谁this就是谁；没有的话，this就是window（全局对象）</li>
<li>自执行函数中的this永远是window</li>
<li>给DOM元素的某一事件绑定方法，当事件触发时，执行对应的方法，方法中的this就是当前元素</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">fn</span>: fn&#125;</div><div class="line">fn() <span class="comment">// -&gt; this is window</span></div><div class="line">obj.fn() <span class="comment">// -&gt; this is obj</span></div><div class="line"></div><div class="line">documnet.getElementById(<span class="string">"div1"</span>).onclick = fn;</div><div class="line">documnet.getElementById(<span class="string">"div1"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="comment">//但函数作用于内的this为'#div'</span></div><div class="line">  fn() <span class="comment">// -&gt; this is window</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>你以为 你以为的 就是你以为的！</strong></p>
</blockquote>
<hr>
<h3 id="课时9：综合练习题"><a href="#课时9：综合练习题" class="headerlink" title="课时9：综合练习题"></a>课时9：综合练习题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">20</span></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">num</span>: <span class="number">30</span>,</div><div class="line">  <span class="attr">fn</span>: (<span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.num *=<span class="number">3</span></div><div class="line">    num += <span class="number">15</span></div><div class="line">    <span class="keyword">var</span> num = <span class="number">45</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.num *= <span class="number">4</span></div><div class="line">      num += <span class="number">20</span></div><div class="line">      <span class="built_in">console</span>.log(num)</div><div class="line">    &#125;</div><div class="line">  &#125;)(num)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> fn = obj.fn</div><div class="line">fn()</div><div class="line">obj.fn()</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.num, obj.num)</div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/zhufeng09.svg" alt="09"></p>
<hr>
<h3 id="课时10：综合实战题"><a href="#课时10：综合实战题" class="headerlink" title="课时10：综合实战题"></a>课时10：综合实战题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">'button'</span>)</div><div class="line"><span class="keyword">var</span> oCount = <span class="built_in">document</span>.getElementById(<span class="string">'count'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 方法一：全局作用域法</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    oCount.innerHTML = ++count</div><div class="line">&#125; <span class="comment">// 弊端：全局变量污染</span></div><div class="line"></div><div class="line"><span class="comment">// 方法二：私有作用域法之自执行函数</span></div><div class="line">~<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        oCount.innerHTML = ++count</div><div class="line">    &#125;</div><div class="line">&#125;() <span class="comment">// 弊端：私有作用域不销毁，浪费一丁点内存</span></div><div class="line"></div><div class="line"><span class="comment">// 方法三：私有作用域法之直接绑定自执行函数</span></div><div class="line">oBtn.onclick = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> count = <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        oCount.innerHTML = ++count</div><div class="line">    &#125;</div><div class="line">&#125;)()  <span class="comment">// 弊端：私有作用域不销毁，浪费一丁点内存</span></div><div class="line"></div><div class="line"><span class="comment">// 方法四：innerHtml法</span></div><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    oCount.innerHTML++</div><div class="line">&#125;  <span class="comment">// 弊端：利用innerHtml方法读写，再加字符串转数字，最后渲染页面</span></div><div class="line"></div><div class="line"><span class="comment">// 方法五：自定义属性法</span></div><div class="line">oBtn.count = <span class="number">0</span> <span class="comment">//在btn上设置一个自定义属性</span></div><div class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    oCount.innerHTML = ++<span class="keyword">this</span>.count</div><div class="line">&#125;  <span class="comment">// 推荐</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时11：单例模式"><a href="#课时11：单例模式" class="headerlink" title="课时11：单例模式"></a>课时11：单例模式</h3><ul>
<li>对象数据类型的作用<ul>
<li>把描述同一个事物（同一个对象）的属性和方法放在一个内存空间下，起到了分组的作用，这样不同事物之间的属性名相同，相互也不会发生冲突</li>
<li>我们把这种分组编写代码的模式叫作“单例模式”</li>
<li>在单利模式中我们把person1或者person2也叫做“命名空间”</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person1 = &#123; <span class="attr">name</span>: <span class="string">'xxx'</span> &#125;</div><div class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">'yyy'</span> &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>单例模式是一种项目开发中经常使用的模式，因为项目中我们可以使用单例模式来进行“模块化开发”</p>
</blockquote>
<ul>
<li>“模块化开发”对于一个相对来说较大的项目，需要多人协同开发的，我们一般情况下会根据当前项目的需求划分成几个功能板块，每个人负责开发一部分，同时开发，最后把每个人开发的代码进行合并。</li>
</ul>
<hr>
<h3 id="课时12：工厂模式"><a href="#课时12：工厂模式" class="headerlink" title="课时12：工厂模式"></a>课时12：工厂模式</h3><ul>
<li>单例模式虽然解决了分组作用，但是不能实现批量生产，属于手工作业模式 -&gt; 需要改进成”工厂模式“</li>
<li>把实现同一件事情的相同代码放到一个函数中，以后如果再想实现这个功能，不需要重新编写这些代码，只需要执行这个工厂函数即可 -&gt; ”函数封装“ –&gt; ”低耦合高内聚“：减少冗余代码，提高代码的复用率</li>
<li>JS是一门轻量级的脚本”编程语言“（HTML+CSS不属于编程语言，属于标记语言）</li>
<li><p>大多的编程语言都是面向对象开发的 -&gt; 类的继承、封装、多态</p>
<ul>
<li>继承：子类继承父类中的属性和方法</li>
<li>多态：当前方法的多种形态。后台语言中：多态包含重载和重写</li>
</ul>
</li>
<li><p>JS中不存在重载，方法名一样的话，后面的会把前面的覆盖，最后只保留最后一个。</p>
<ul>
<li>JS中有一个操作类似重载但不是重载：我们可以在函数体里根据传递参数的不一样，实现不同的功能。</li>
<li>重写：子类重写父类的方法</li>
</ul>
</li>
</ul>
<blockquote>
<p>说白了工厂模式就是一个“破函数”</p>
</blockquote>
<hr>
<h3 id="课时13：构造函数模式基础"><a href="#课时13：构造函数模式基础" class="headerlink" title="课时13：构造函数模式基础"></a>课时13：构造函数模式基础</h3><h4 id="构造函数模式和工厂模式的区别"><a href="#构造函数模式和工厂模式的区别" class="headerlink" title="构造函数模式和工厂模式的区别"></a>构造函数模式和工厂模式的区别</h4><ul>
<li><p>执行的时候：</p>
<ul>
<li>普通函数执行 -&gt; <code>creatorPerson()</code></li>
<li>构造函数执行 -&gt; <code>New creatorPerson()</code>，此时creatorPerson就是类名，返回实例。</li>
</ul>
</li>
<li><p>在函数代码执行的时候</p>
<ul>
<li>相同点：都是形成一个私有的作用域，然后执行步骤 形参赋值-&gt;预解释-&gt;代码从上到下执行（类和普通函数一样，它也有普通函数的一面）</li>
<li>不同点：在代码执行之前，不用自己在手动创建obj对象，浏览器会默认自动创建一个对象数据类型的值（这个对象其实就是我们当前类的一个实例）；接下来代码从上到下执行，以当前的实例为执行的主体（this代表的就是当前），然后分别的把属性名和属性值赋值给当前实例；最后浏览器会默认自动把创建的实例返回。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工厂模式</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;  <span class="comment">// 这里创建对象</span></div><div class="line">  obj.name = name</div><div class="line">  obj.age = age</div><div class="line">  <span class="keyword">return</span> obj  <span class="comment">// 这里返回这个对象</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span> (<span class="params">name, age</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里不需要创建</span></div><div class="line">  <span class="keyword">this</span>.name = name</div><div class="line">  <span class="keyword">this</span>.age = age</div><div class="line">  <span class="comment">// 这里不需要返回</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>1.JS中所有的类都是函数数据类型，他通过new执行成一个类，但它本事也是一个普通的函数；JS中所有的实例都是对象数据类型<br>2.在构造函数模式中，类中（函数体中）出现的this均指当前类的一个实例<br>3.两个实例都是类的实例，所有都有用相同的方法，但是不同实例之间的方法都是不一样的。在类中给实例添加的属性都属于这个实例的私有属性，实例和实例之间是单独的个体，所以私有的属性之间不相等。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> res = CreatePerson(<span class="string">'szy'</span>, <span class="number">18</span>) <span class="comment">// 函数方式执行构造函数：首先res接收到的是undefined，因为没return。其次是构造函数中的`this`是全局的window对象。</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时14：构造函数模式扩展"><a href="#课时14：构造函数模式扩展" class="headerlink" title="课时14：构造函数模式扩展"></a>课时14：构造函数模式扩展</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> num = <span class="number">4</span></div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span> <span class="comment">// 此时，this为当前实例f1</span></div><div class="line">  <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) <span class="comment">// 而这个this就需要调用时才知道是谁</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line">f1.getX() <span class="comment">// -&gt; 方法中的this是f1 -&gt; 100</span></div><div class="line">f1.num <span class="comment">// -&gt; undefined</span></div><div class="line"><span class="keyword">var</span> ss = f1.getX</div><div class="line">ss() <span class="comment">// -&gt; 方法中的this是window -&gt; undefined</span></div></pre></td></tr></table></figure>
<ul>
<li>在构造函数模式中，<code>new Fn()</code>执行，如果Fn没有参数，则后面的小括号可以省略<code>new Fn</code></li>
<li>this的问题：在类中出现的this.xxx的this都是当前类的实例，而某一属性值（方法）中若出现this则需要看方法执行的时候，前面是否有’.’才能知道this是谁（谁调用）</li>
<li>类也有普通函数的一面，当函数执行的时候，<code>var num</code>其实只是当前形成私有作用域中的私有变量而已，它和我们的f1这个实例没有任何关系；只有<code>this.xxx=yyy</code>才相当于给f1这个实例添加私有属性和方法，才和我们f1有关系</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">name</span>: <span class="string">"szy"</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line"><span class="built_in">console</span>.log(f1)  <span class="comment">// -&gt; &#123;name: "szy"&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>在构造函数模式中，浏览器会默认的把我们实例返回（返回的是一个对象数据类型的值），如果我们手动写了return返回的话：<ul>
<li>若返回的是一个基本数据类型的值，则当前实例是不变的，还是照样返回这个实例，如<code>return 100</code></li>
<li>若返回的是一个引用数据类型的值，则当前要返回的这个实例会被我们手动设置的对象给替换，如<code>return { name: &quot;szy&quot; }</code></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> Fn)  <span class="comment">// -&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Array</span>)  <span class="comment">// -&gt; false</span></div><div class="line"><span class="built_in">console</span>.log(f1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>)  <span class="comment">// -&gt; true 因为所有的实例都是对象数据类型的，而每个对象数据类型都是Object这个内置类的一个实例，所以f1也是它的一个实例。对于检测数据类型来说，typeof有自己的局限性，不能细分object下的对象、数组、正则等...</span></div></pre></td></tr></table></figure>
<ul>
<li>检查某个实例是否是某个类的实例：<strong>instanceof</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div></pre></td></tr></table></figure>
<ul>
<li>f1和f2都是Fn这个类的实例，都拥有x和getX两个属性，但是这两个属性是各自的私有属性，用<code>===</code>判断的结果是<code>false</code><ul>
<li><code>in</code>：检测某一个属性名是否存在于某个对象(attrName in object)，不管是私有属性还是共有属性，只要存在，用<code>in</code>来检测都是true</li>
<li><code>hasOwnProperty</code>：用来检测某一个属性是否为这个对象的“自有(私有)属性”，这个方法只能检测自有属性</li>
</ul>
</li>
</ul>
<blockquote>
<p>思考：检测某一个属性是否为这个对象的“共有属性”：hasPubProperty<br>原理：检测是否为对象的属性，并检测不是对象的私有属性即可。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPubProperty</span>(<span class="params">obj, attr</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (attr <span class="keyword">in</span> obj) &amp;&amp; (!obj.hasOwnProperty(attr))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>isPrototypeOf</code></li>
</ul>
<hr>
<h3 id="课时15：原型链模式基础"><a href="#课时15：原型链模式基础" class="headerlink" title="课时15：原型链模式基础"></a>课时15：原型链模式基础</h3><blockquote>
<p>基于构造函数模式的原型链模式解决了 方法或者属性公有的问题 -&gt; 把实例之间相同的属性和方法提取出来成公有的属性和方法 -&gt; 想让谁公有就把它放在<code>.prototype</code>属性上即可</p>
</blockquote>
<ul>
<li>每一个函数数据类型（普通函数、类）都有一个天生的自带属性：<code>prototype</code>（原型），并且这个属性是一个对象数据类型的值</li>
<li>并且在<code>prototype</code>上浏览器天生给它加了一个属性<code>constructor</code>（构造器），属性值就是当前的函数(类)本身</li>
<li>每一个对象数据类型(普通对象、实例、prototype、数组、正则、Data…)也天生自带一个属性：<code>__proto__</code>，其属性值就是当前实例所属类的原型(prototype)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">  <span class="keyword">this</span>.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">&#125;</div><div class="line">Fn.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line">Fn.prototype.sum = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> Fn</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Fn.prototype.constructor === Fn)  <span class="comment">// -&gt; true</span></div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/prototype%20chain%20base.svg" alt="prototype chain base"></p>
<h4 id="原型链模式"><a href="#原型链模式" class="headerlink" title="原型链模式"></a>原型链模式</h4><ul>
<li><code>f1.hasOwnPerproty(&quot;x&quot;)</code>中hasOwnPerproty是f1的一个属性。</li>
<li>但是我们发现在f1的私有属性上并没有这个方法，那如何处理呢？<ul>
<li>1.通过 对象名.属性名 的方式获取属性值时，首先会在对象的私有属性上进行查找，如果私有中存在这个属性，则获取这个私有的属性值；</li>
<li>如果私有的没有，则通过<code>__proto__</code>对象找到所属的原型（类的原型上定义的属性和方法仅是当前实例公有的属性和方法），原型上存在的话，获取到的是公有的属性值；</li>
<li>如果原型上也没有，则继续通过原型上的<code>__proto__</code>继续向上查找，一直找到Object.prototype为止</li>
</ul>
</li>
</ul>
<blockquote>
<p>这种查找机制就是我们的“原型链模式”</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">f1.getX === f2.getX <span class="comment">// -&gt; ture</span></div><div class="line">f1.__proto__.getX === f2.getX <span class="comment">// -&gt; ture</span></div><div class="line">f1.getX === Fn.prototype.getX <span class="comment">// -&gt; ture</span></div><div class="line"></div><div class="line">f1.sum === f2.__proto__.sum <span class="comment">// -&gt; false 前一个是私有的，后一个是公有的</span></div><div class="line">f1.sum === Fn.prototype.sum <span class="comment">// -&gt; false</span></div><div class="line"></div><div class="line">f1.hasOwnProperty <span class="comment">// -&gt; </span></div><div class="line">f1.__proto__.__proto__.hasOwnProperty <span class="comment">// 找到了Object上</span></div></pre></td></tr></table></figure>
<ul>
<li>在IE浏览器中，我们原型链模式也是同样原理，但是IE浏览器怕你通过<code>__proto__</code>把公有的修改，禁止我们只用<code>__proto__</code>，但我们可以使用父类的<code>prototype</code>属性来修改子类的公有属性</li>
</ul>
<hr>
<h3 id="课时16：原型链模式扩展：this"><a href="#课时16：原型链模式扩展：this" class="headerlink" title="课时16：原型链模式扩展：this"></a>课时16：原型链模式扩展：this</h3><ul>
<li>在原型链中，<code>this</code>常用的两种情况<ul>
<li>在类中<code>this.xxx</code>此时<code>this</code>是当前类的实例</li>
<li>在某一个方法中的<code>this</code>，看执行的时候’.’前面是谁<code>this</code>就是谁</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">  <span class="keyword">this</span>.y = <span class="number">200</span></div><div class="line">  getY: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.y) &#125;</div><div class="line">&#125;</div><div class="line">Fn.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Fn,</div><div class="line">  <span class="attr">y</span>: <span class="number">300</span>,</div><div class="line">  <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;,</div><div class="line">  <span class="attr">getY</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.y) &#125;</div><div class="line">&#125;</div><div class="line">Fn.prototype.setX = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="keyword">this</span>.x = val &#125;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn</div><div class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> Fn</div><div class="line">f1.getX()  <span class="comment">// -&gt; 相当于console.log(f.x) -&gt; 100</span></div><div class="line">f1.__proto__.getX()  <span class="comment">// -&gt; 相当于console.log(f.__proto__.x) -&gt; undefined 公有的x还没定义，跳过了私有从公有找起，找到object的原型上也没有就undefined★★</span></div><div class="line">f1.getY()  <span class="comment">// -&gt; 200</span></div><div class="line">f1.__proto__.getY()  <span class="comment">// -&gt; 300</span></div><div class="line">Fn.Prototype.setX(<span class="number">400</span>) <span class="comment">// this=Fn.prototype -&gt; Fn.prototype.x = 400, 公有的添加新属性x=400, f2也可以访问到这个公有x属性</span></div><div class="line">f1.getX() <span class="comment">// -&gt; 100, this.x -&gt; f1.x 这里获取的x还是f1私有的x:100</span></div><div class="line">f1.__proto__.getX() <span class="comment">// -&gt; 400, 刚刚用set方法设置了公有x为400</span></div><div class="line">f1.setX(<span class="number">500</span>) <span class="comment">// -&gt; this=f1, f1.x = 500, 把f1自己私有的x改为500</span></div><div class="line">f1.y = <span class="number">222</span>  <span class="comment">// -&gt; 设置f1.y自己私有的y为222, 和f2实例没有任何关系</span></div></pre></td></tr></table></figure>
<ol>
<li>需要先确定<code>this</code>的指向</li>
<li>把<code>this</code>替换成对应的代码</li>
<li>按照原型链查找的机制，一步步的向上查找结果</li>
</ol>
<h4 id="链式写法：执行完成数组的一个方法后可以紧接着执行下一个方法"><a href="#链式写法：执行完成数组的一个方法后可以紧接着执行下一个方法" class="headerlink" title="链式写法：执行完成数组的一个方法后可以紧接着执行下一个方法"></a>链式写法：执行完成数组的一个方法后可以紧接着执行下一个方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">4</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">9</span>]</div><div class="line">ary.sort(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> a-b&#125;).reverse().pop.push(<span class="number">40</span>) <span class="comment">// 报错</span></div></pre></td></tr></table></figure>
<ul>
<li>原理：因为sort是Array.protoytpe对象上的公有方法，而数组ary是Arrya的实例，所以ary可以调用sort方法，数组才能使用我们Array原型上定义的属性和方法<ul>
<li>sort执行完成的返回值是一个排序后的新数组，可以继续执行reverse方法</li>
<li>reverse执行完成后返回值是一个数组，可以继续执行pop方法</li>
<li>pop执行完成后返回值是那个被删除的元素，不再是一个数组了，再执行时报错。</li>
</ul>
</li>
</ul>
<h4 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h4><p>1.手工实现Array.slice函数，要求不能使用Array原生方法，考虑多种情况！<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.szySlice = <span class="function"><span class="keyword">function</span> (<span class="params">start, end</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里形参end是索引号，例如第几个元素，没有第0个，第1个开始</span></div><div class="line">  <span class="comment">// 情况01：当end &lt;= start时，直接返回空数组</span></div><div class="line">  <span class="keyword">if</span> (end &lt;= start) <span class="keyword">return</span> [] <span class="comment">// -&gt; []</span></div><div class="line">  <span class="keyword">var</span> newArr = <span class="keyword">new</span> <span class="built_in">Array</span></div><div class="line">  <span class="comment">// 情况02： 两个参数均不存在</span></div><div class="line">  <span class="keyword">if</span> (!start &amp;&amp; !end) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">      newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newArr <span class="comment">// -&gt; 复制一遍原数组给返回数组 -&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">/////////////以下为end不存在</span></div><div class="line">  <span class="keyword">if</span> (!end) &#123;</div><div class="line">    <span class="comment">// 情况03：当end不存在，且start也大于0时</span></div><div class="line">    <span class="comment">// 处理：从start位开始取，取到末尾</span></div><div class="line">    <span class="keyword">if</span> (start &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// -&gt; arr.szySlice(5) -&gt; [ 6, 7, 8, 9 ]</span></div><div class="line">    <span class="comment">// 情况04：当end不存在，且start + this.length的结果为正数时</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="keyword">this</span>.length + start) &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.length + start; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// -&gt; arr.szySlice(-3) -&gt; [ 7, 8, 9 ]</span></div><div class="line">    <span class="comment">// 情况05：当end不存在，且start + this.length结果为负数时</span></div><div class="line">    <span class="comment">// 判断：当start修正位小于0时，默认从0开始取，取到end，此时end不存在，取到末尾</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// -&gt; 复制一遍数组 -&gt; [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/////////////以上为end不存在</span></div><div class="line">  <span class="comment">// 现在可以不考虑end和start都不存在的情况，默认start,end存在</span></div><div class="line">  <span class="comment">// 注：这里已经排除了start &gt;= end情况</span></div><div class="line"></div><div class="line">  <span class="comment">// 情况06：当start存在，而end=0时，也是直接空数组</span></div><div class="line">  <span class="keyword">if</span> (end == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> newArr <span class="comment">// -&gt; 空数组</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (end &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// 情况07：当start+length &gt;= end 则直接空数据</span></div><div class="line">    <span class="comment">// 判断：当start修正数大于等于end，则空数据</span></div><div class="line">    <span class="keyword">if</span> ((start+<span class="keyword">this</span>.length) &gt;= end) &#123;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// -&gt; 空数组</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 情况08：当start+length &lt; end</span></div><div class="line">    <span class="comment">// 判断：当start修正数小于end</span></div><div class="line">    <span class="comment">// 处理：从start修正数开始取，取到end结束</span></div><div class="line">    <span class="keyword">if</span> ((start+<span class="keyword">this</span>.length) &lt; end) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start+<span class="keyword">this</span>.length; i &lt; end; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// arr.szySlice(-4,7) -&gt; [ 6, 7 ]</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 情况09：当end&gt;0，且start小于0，且this.length + start结果大于等于0</span></div><div class="line">    <span class="comment">// 处理：从start修正数开始，取到本数组末尾</span></div><div class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span> &amp;&amp; (<span class="keyword">this</span>.length + start) &gt;= <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">this</span>.length + start; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// arr.szySlice(-4,-1)  -&gt; [ 6, 7, 8 ]</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//  没遇到这样的情况</span></div><div class="line">    <span class="comment">// // 情况10：当end&gt;0，且start小于0，且this.length + start结果小于0</span></div><div class="line">    <span class="comment">// if (start &lt; 0 &amp;&amp; (this.length + start) &lt; 0) &#123;</span></div><div class="line">    <span class="comment">//   for (var i = 0; i &lt; end; i++) &#123;</span></div><div class="line">    <span class="comment">//     newArr[newArr.length] = this[i]</span></div><div class="line">    <span class="comment">//   &#125;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">// 情况11：当end&gt;0，且start&gt;0</span></div><div class="line">    <span class="keyword">if</span> (start &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start; i &lt; end; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">// !!!!当start和end 均为负数</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 情况12：其实可以不需要处理</span></div><div class="line">    <span class="keyword">if</span> ((end + <span class="keyword">this</span>.length) &lt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> newArr</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 情况13：当修正end大于0 且 修正start小于0</span></div><div class="line">    <span class="comment">// 处理：设置start为0开始，取到end修正后的数字</span></div><div class="line">    <span class="keyword">if</span> ((end+<span class="keyword">this</span>.length&gt;=<span class="number">0</span>) &amp;&amp; (start+<span class="keyword">this</span>.length) &lt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; end+<span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr <span class="comment">// -&gt; [ 1, 2, 3, 4 ]</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 情况14：当修正start大于等于0</span></div><div class="line">    <span class="keyword">if</span> ((start+<span class="keyword">this</span>.length) &gt;=<span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = start+<span class="keyword">this</span>.length; i &lt; end+<span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        newArr[newArr.length] = <span class="keyword">this</span>[i]</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> newArr</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> newArr</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.实现一个需求：<code>(5).plus(10).minus(2)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.prototype.plus = <span class="function"><span class="keyword">function</span> (<span class="params">opt</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> + <span class="built_in">Number</span>(opt) <span class="comment">// new, this = [Number: 5]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Number</span>.prototype.minus = <span class="function"><span class="keyword">function</span> (<span class="params">opt</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span> - <span class="built_in">Number</span>(opt) <span class="comment">// new, this = [Number: 15]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log((<span class="number">5</span>).plus(<span class="number">10</span>).minus(<span class="number">2</span>))</div></pre></td></tr></table></figure>
<hr>
<h3 id="课时17：原型链模式扩展-批量设置公有属性"><a href="#课时17：原型链模式扩展-批量设置公有属性" class="headerlink" title="课时17：原型链模式扩展-批量设置公有属性"></a>课时17：原型链模式扩展-批量设置公有属性</h3><h4 id="方法一：起别名"><a href="#方法一：起别名" class="headerlink" title="方法一：起别名"></a>方法一：起别名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line"><span class="keyword">var</span> pro = Fn.protptype</div><div class="line">pro.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<h4 id="方法二：重构原型对象"><a href="#方法二：重构原型对象" class="headerlink" title="方法二：重构原型对象"></a>方法二：重构原型对象</h4><blockquote>
<p>自己新开辟一个堆内存，存储我们公有的属性和方法，把浏览器原来给Fn.prototype开辟的那个替换掉</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line">Fn.prototype = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  consttuctor: Fn</div><div class="line">  a: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn</div></pre></td></tr></table></figure>
<ul>
<li>1.只有浏览器天生给Fn.prototype开辟的堆内存才有constructor，而我们自己创建的堆内存没有这个属性，这样constructor指向就不再是Fn而是Object。为了和原来的保持一致，我们需要手动的增加constructor的指向。</li>
<li>2.用这种方式给内置类增加公有的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: <span class="built_in">Array</span>,</div><div class="line">  <span class="attr">unique</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125; <span class="comment">// 这种方法会把原来存在于原型的内置属性和方法替换掉，所以浏览器会给屏蔽掉</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</div><div class="line">&#125; <span class="comment">// 但是我们可以一个一个的修改内置方法，当我们通过下述方法在数组的原型上添加方法时，如果方法名和原来内置的方法名重名了，会把原先内置的替换掉。故建议以后为内置类添加方法时，命名都加上特俗的前缀。</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="课时18：深入扩展原型链模式-常用的六种继承方法"><a href="#课时18：深入扩展原型链模式-常用的六种继承方法" class="headerlink" title="课时18：深入扩展原型链模式-常用的六种继承方法"></a>课时18：深入扩展原型链模式-常用的六种继承方法</h3><h4 id="for-in循环枚举属性"><a href="#for-in循环枚举属性" class="headerlink" title="for in循环枚举属性"></a><code>for in</code>循环枚举属性</h4><p><code>for in</code>循环在遍历时，默认会把自己私有的和在它所属类原型上扩展的属性和方法都可以遍历到，但是一般情况下，我们遍历一个对象只需要遍历私有即可，故使用时需要做一下判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.szy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> obj =  &#123;<span class="attr">name</span>: <span class="string">'szy'</span>&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="keyword">if</span> (obj.propertyIsEnumerable(key)) &#123; ... &#125;</div><div class="line">  <span class="comment">// 或者也可以这样</span></div><div class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">constructor</span>: Fn,</div><div class="line">  <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="keyword">if</span>(obj.hasOwnProperty(key)) &#123; <span class="comment">// 自己私有的</span></div><div class="line">    obj2[key] = obj[key]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj3 = <span class="built_in">Object</span>.create(obj) <span class="comment">// 这个的结果也等于克隆，但会把obj里的所有属性和方法放在obj3的__proto__原型上</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Object.create(protoObj) 创建一个新的对象，但还要把<code>protoObj</code>作为这个新对象的原型(ECMASrcipt5新增，IE6~8不兼容)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"x"</span>) &#125; &#125;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.create(obj)</div><div class="line"><span class="comment">//  .__protp__:</span></div><div class="line"><span class="comment">//    getX: function () &#123;&#125;</span></div><div class="line"><span class="comment">//    __protp__: Object.prototype</span></div><div class="line">obj2.getX() <span class="comment">// -&gt; x</span></div><div class="line">obj.getY = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"y"</span>) &#125;</div><div class="line"></div><div class="line">obj2.getY() <span class="comment">// -&gt; y</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模拟Object.create</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">  Fn.prototype = o</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Fn</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"x"</span>) &#125; &#125;</div><div class="line"><span class="keyword">var</span> newObj = object(obj)</div></pre></td></tr></table></figure>
<h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><ul>
<li>第一种继承方法：原型链继承。其原理是把父类公有和私有的都给子类公有的。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#div1.__proto__ </span></div><div class="line">    -&gt; HTMLDivElement.prototype </div><div class="line">        -&gt; HTMLElement.prototype </div><div class="line">            -&gt; Element.prototype </div><div class="line">                -&gt; Node.prototype </div><div class="line">                    -&gt; EventTarget.prototype </div><div class="line">                        -&gt; Object.prototype</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myObject</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">myObject.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: <span class="built_in">Object</span>,</div><div class="line">  <span class="attr">hasOwnProperty</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">  <span class="attr">toString</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventTarget</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">EventTarget.prototype = <span class="keyword">new</span> myObject</div><div class="line">EventTarget.prototype.addEventListener = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNode</span> (<span class="params"></span>) </span>&#123; &#125;</div><div class="line">myNode.prototype = <span class="keyword">new</span> EventTarget</div><div class="line">myNode.prototype.createElement = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> szyNode = <span class="keyword">new</span> myNode</div><div class="line">szyNode.getNode = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/WX20170530-134424.png" alt="00"></p>
<ul>
<li>原型继承是JS中最常用的一种继承方法。子类B想要继承父类A的所有属性和方法（公有+私有），只需要让B.prototype = new A(A的一个实例)即可。其还有一个特点：它是把父类中私有和公有的都继承到了子类原型上(子类公有)。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">100</span></div><div class="line">&#125;</div><div class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="number">200</span></div><div class="line">&#125;</div><div class="line">B.prototype = <span class="keyword">new</span> A</div><div class="line">B.consturctor = B</div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/prototype_china%C2%8B.svg" alt="prototype-chain"></p>
<h5 id="原型链核心：原型继承并不是把父类A中的属性和方法克隆一份一模一样的给子类B，而是让子类B和父类A之间添加了一原型链的链接，以后子类的实例c想要爷爷类A中getX方法时，只需要一级一级往上查找来用。"><a href="#原型链核心：原型继承并不是把父类A中的属性和方法克隆一份一模一样的给子类B，而是让子类B和父类A之间添加了一原型链的链接，以后子类的实例c想要爷爷类A中getX方法时，只需要一级一级往上查找来用。" class="headerlink" title="原型链核心：原型继承并不是把父类A中的属性和方法克隆一份一模一样的给子类B，而是让子类B和父类A之间添加了一原型链的链接，以后子类的实例c想要爷爷类A中getX方法时，只需要一级一级往上查找来用。"></a>原型链核心：原型继承并不是把父类A中的属性和方法克隆一份一模一样的给子类B，而是让子类B和父类A之间添加了一原型链的链接，以后子类的实例c想要爷爷类A中getX方法时，只需要一级一级往上查找来用。</h5><h4 id="第二种继承方法：call继承"><a href="#第二种继承方法：call继承" class="headerlink" title="第二种继承方法：call继承"></a>第二种继承方法：call继承</h4><ul>
<li>call继承作用：把父类私有的属性和方法克隆一份一模一样的作为子类私有的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  A.call(<span class="keyword">this</span>) <span class="comment">// -&gt; 相当于A.call(n) 把A函数执行，让A中的this等于n</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> B</div><div class="line"><span class="built_in">console</span>.log(n.x) <span class="comment">// -&gt; 100</span></div></pre></td></tr></table></figure>
<h4 id="第三种继承方法：冒充对象继承"><a href="#第三种继承方法：冒充对象继承" class="headerlink" title="第三种继承方法：冒充对象继承"></a>第三种继承方法：冒充对象继承</h4><ul>
<li>冒充对象继承：把父类私有和公有的都克隆一份一模一样的给子类私有的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> tmp = <span class="keyword">new</span> A</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> tmp) &#123;</div><div class="line">    <span class="comment">//  if (tem.hasOwnproperty(key)) 不过滤了</span></div><div class="line">    <span class="keyword">this</span>[key] = tmp[key]</div><div class="line">  &#125;</div><div class="line">  tmp = <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> B</div><div class="line"><span class="built_in">console</span>.log(n.x) <span class="comment">// -&gt; 100</span></div></pre></td></tr></table></figure>
<h4 id="第四种继承方法：混合模式继承"><a href="#第四种继承方法：混合模式继承" class="headerlink" title="第四种继承方法：混合模式继承"></a>第四种继承方法：混合模式继承</h4><ul>
<li>混合模式继承：原型继承+call继承。原理就是把父类的私有的克隆一份给子类的私有，再把父类的私有和公有的指向子类的公有</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  A.call(<span class="keyword">this</span>) <span class="comment">// -&gt; n.x: 100 , 整了两遍。</span></div><div class="line">&#125;</div><div class="line">B.prototype = <span class="keyword">new</span> A <span class="comment">// -&gt; B.prototype: x:100, getX:function</span></div><div class="line">B.prototype.constructor = B</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> B</div><div class="line"><span class="built_in">console</span>.log(n.x) <span class="comment">// -&gt; 100</span></div></pre></td></tr></table></figure>
<h4 id="第五种继承方法：寄生组合式继承"><a href="#第五种继承方法：寄生组合式继承" class="headerlink" title="第五种继承方法：寄生组合式继承"></a>第五种继承方法：寄生组合式继承</h4><ul>
<li>寄生组合式继承：类混合继承，但不把父类私有引入子类公有。原理就是把父类的私有克隆一份给子类的私有，再把父类的公有指向子类的公有（中间多了一层<strong>popto</strong>）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.x = <span class="number">100</span> &#125;</div><div class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.x) &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  A.call(<span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype) <span class="comment">// 只把父类的原型给子类原型！不把父类私有的放子类原型上！</span></div><div class="line">B.prototype.constructor = B</div><div class="line"></div><div class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> B</div><div class="line"><span class="built_in">console</span>.log(n.x) <span class="comment">// -&gt; 100</span></div></pre></td></tr></table></figure>
<h4 id="第六种继承方法：中间类继承"><a href="#第六种继承方法：中间类继承" class="headerlink" title="第六种继承方法：中间类继承"></a>第六种继承方法：中间类继承</h4><ul>
<li>中间类继承：直接把目标<strong>proto</strong>指向指定原型。例如：类数据对象的<strong>proto</strong>指向数据的prototypr。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">avgFn</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">arguments</span>.__proto__ = <span class="built_in">Array</span>.prototype</div><div class="line">  <span class="built_in">arguments</span>.pop()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="课时19：原型链综合复习参考"><a href="#课时19：原型链综合复习参考" class="headerlink" title="课时19：原型链综合复习参考"></a>课时19：原型链综合复习参考</h3><ul>
<li>instanceof</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">odiv instanceof HTMLElement // -&gt; true</div><div class="line">odiv instanceof Element     // -&gt; true</div><div class="line">odiv instanceof Node        // -&gt; true</div><div class="line">odiv instanceof EventTarget // -&gt; true</div><div class="line">odiv instanceof object      // -&gt; true</div></pre></td></tr></table></figure>
<blockquote>
<p>instanceof在检查时，左侧实例的原型链上若指向右侧类，则总会返回true</p>
</blockquote>
<ul>
<li>在内置类的原型上扩展方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ary = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>]</div><div class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> <span class="title">unique</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 数组去重</span></div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> cur = <span class="keyword">this</span>[i]</div><div class="line">    <span class="keyword">if</span>(obj[cur] == cur) &#123;</div><div class="line">      <span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>] <span class="comment">// 发现重复项，把末尾项复制去重复项上</span></div><div class="line">      <span class="keyword">this</span>.length-- <span class="comment">// 删除末尾项</span></div><div class="line">      i-- <span class="comment">// 循环指针减1，再重新检查上一次index</span></div><div class="line">      <span class="keyword">continue</span></div><div class="line">    &#125;</div><div class="line">    obj[cur] = cur</div><div class="line">  &#125;</div><div class="line">  obj = <span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(ary.unique())</div></pre></td></tr></table></figure>
<ul>
<li>小考题一个☝️</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span> (<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.x = <span class="keyword">this</span>.y = num</div><div class="line">&#125;</div><div class="line">Fn.prototype = &#123;</div><div class="line">  <span class="attr">x</span>: <span class="number">20</span>,</div><div class="line">  <span class="attr">sum</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x + <span class="keyword">this</span>.y)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn(<span class="number">10</span>)</div><div class="line"><span class="built_in">console</span>.log(f.sum === Fn.prototype.sum) <span class="comment">// -&gt; true, f上没有sum，在f的原型上找到，而f的原型正好是Fn，故是true</span></div><div class="line">f.sum() <span class="comment">// -&gt; f.x + f.y = 10+10 = 20</span></div><div class="line">Fn.prototype.sum() <span class="comment">// -&gt; Fn的原型上没找到Fn.prototype.y，故20+undefined为NaN！</span></div><div class="line"><span class="built_in">console</span>.log(f.constructor) <span class="comment">// -&gt; 根本没定义</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;课时1：预解释&quot;&gt;&lt;a href=&quot;#课时1：预解释&quot; class=&quot;headerlink&quot; title=&quot;课时1：预解释&quot;&gt;&lt;/a&gt;课时1：预解释&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;基本数据类型：number、string、Boolean、null、undefined;&lt;br&gt;引用数据类型：object（{}、[]、/^$/、Date）、function&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当浏览器加载HTML页面的时候，首先会提供一个供全局JS代码执行的环境-&amp;gt;全局作用域（global/window），window不仅代表当前浏览器窗口对象还代表全局作用域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JS中定义一个函数时，首先引擎会先在内存开辟一个内存空间，然后把函数体内的代码当做&lt;strong&gt;字符串&lt;/strong&gt;存入内存空间，最后把块内存的地址赋值给函数名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预解释：在当前作用域中，JS代码执行之前，浏览器会首先默认把所有带var和function的进行提前声明或定义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解定义和声明：&lt;br&gt;声明（declare）：var num; -&amp;gt; 告诉浏览器在全局作用域中有一个num的变量了，默认值undefined&lt;br&gt;定义（defined）：num = 12; -&amp;gt; 给我们声明的变量赋值&lt;/li&gt;
&lt;li&gt;对于带var和function关键字的在预解释时还是不一样的&lt;br&gt;var -&amp;gt; 在预解释时只提前声明&lt;br&gt;function -&amp;gt; 在预解释时提前的声明和定义都完成了&lt;/li&gt;
&lt;li&gt;预解释只发生在当前的作用域下，例如：开始只对window下的进行预解释，只有函数运行时才会对函数中的进行预解释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JS中内存的分类&lt;br&gt;栈内存：用来提供一个供JS代码提供的环境 -&amp;gt; 作用域（全局作用域、私有作用域），预解释发生在栈内存当中;&lt;br&gt;堆内存：用来存储引用数据的值 -&amp;gt; 对象存储的属性名和属性值，函数存储的是代码字符串;  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何区分私有变量和全局变量？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在全局作用域下声明（预解释的时候）的变量是全局变量&lt;/li&gt;
&lt;li&gt;在“私有作用域中声明的变量”和“函数的形参”都是私有变量&lt;/li&gt;
&lt;li&gt;在私有作用域中，我们的代码执行时遇到了一个变量，首先我们需要确定它是否为私有变量，如果是，则和外面作用域的变量没有任何关系；如果不是私有的，则往当前作用域的上级作用域进行查找，如果上级作用域也没有则继续往上查看，一直找到windows全局位置（作用域链）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;课时2：作用域链&quot;&gt;&lt;a href=&quot;#课时2：作用域链&quot; class=&quot;headerlink&quot; title=&quot;课时2：作用域链&quot;&gt;&lt;/a&gt;课时2：作用域链&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;当函数执行的时候（直接目的：让函数体中的代码执行），首先会形成一个新的私有的作用域，然后按如下步骤执行：&lt;ul&gt;
&lt;li&gt;如果有形参，先给形参赋值&lt;/li&gt;
&lt;li&gt;进行私有作用域的预解释&lt;/li&gt;
&lt;li&gt;私有作用域中的代码从上到下执行&lt;/li&gt;
&lt;li&gt;函数形参的一个新的私有变量保护了里面的私有变量不受外界的干扰（外面修改不了私有的，私有的也修改不了外面的）–&amp;gt; “闭包”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;课时3：全局变量的细节问题&quot;&gt;&lt;a href=&quot;#课时3：全局变量的细节问题&quot; class=&quot;headerlink&quot; title=&quot;课时3：全局变量的细节问题&quot;&gt;&lt;/a&gt;课时3：全局变量的细节问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;私有作用域中出现的一个变量不是私有的，则往上级作用域进行查找，上级作用域没有则继续往上级查找，一直找到window为止，如果window下也没有则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若是获取值：console.log(total) -&amp;gt; 报错！&lt;/li&gt;
&lt;li&gt;若是设置值：total = 100  -&amp;gt; 相当于给window增加了一个属性并赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在JS中，在不进行任何特殊处理的情况下，上面的代码报错，下面的代码都不再执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&quot;课时4：预解释是一种毫无节操的机制&quot;&gt;&lt;a href=&quot;#课时4：预解释是一种毫无节操的机制&quot; class=&quot;headerlink&quot; title=&quot;课时4：预解释是一种毫无节操的机制&quot;&gt;&lt;/a&gt;课时4：预解释是一种毫无节操的机制&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;自从学了预解释，从此节操是路人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;预解释时，只要用&lt;code&gt;var&lt;/code&gt;声明的变量，不管所在的条件语块是否成立，统统提前声明&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(&lt;span class=&quot;string&quot;&gt;&quot;num&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;)) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// -&amp;gt;(!true) -&amp;gt; false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// 不执行赋值操作，但得预解释给window声明属性window.num&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num) &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; undefined ★&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;预解释的时候只对‘=’左边的表达式预解释，不对‘=’的值进行预解释！匿名函数之函数表达式：把函数定义的部分当做一个值赋值给我们的变量、元素的某一个事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;fn1()  &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; undefined() -&amp;gt; Uncaught TypeError: fn1 is not a function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn1 = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn2()  &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; ok&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn2&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;ok&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn2()  &lt;span class=&quot;comment&quot;&gt;// ok&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;个人建议使用fn1函数之函数表达式定义函数，这样的好处是，函数只在代码下方执行，如果函数报错，只需要网上查即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;执行函数定义的那个function在全局作用域下不进行代码预解释，当代码执行到这个位置时定义和执行一起完成了。自执行函数：定义和执行一起完成了&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;)(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;!&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;函数体中&lt;code&gt;return&lt;/code&gt;下面的代码虽然不执行了，但是需要进行预解释；&lt;code&gt;return&lt;/code&gt;后面跟着的都是我们的返回值，所以不进行预解释；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在预解释时，如果名字已经声明过了，则不会重新再声明，但会重新赋值；在JS中，如果变量名和函数名重复了，也会覆盖！&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// window预解释执行步骤&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明+定义 fn = x000ff11&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明var fn （不会重复声明，覆盖老的fn）&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 声明（不会重复声明）+定义 fn = 0x000ff22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// -&amp;gt; fn = 0x000ff22&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn()  &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn()  &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn()  &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; 10() -&amp;gt; Error: fn is not a function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fn() &lt;span class=&quot;comment&quot;&gt;// 不执行了！&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;h3 id=&quot;课时5：如何查找上级作用域&quot;&gt;&lt;a href=&quot;#课时5：如何查找上级作用域&quot; class=&quot;headerlink&quot; title=&quot;课时5：如何查找上级作用域&quot;&gt;&lt;/a&gt;课时5：如何查找上级作用域&lt;/h3&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>EAS-Mobile-backend 项目总结 [持续更新]</title>
    <link href="http://jerryshi.com/2017/05/23/EAS-Mobile-backend-summary/"/>
    <id>http://jerryshi.com/2017/05/23/EAS-Mobile-backend-summary/</id>
    <published>2017-05-23T02:46:00.000Z</published>
    <updated>2017-05-26T16:53:51.580Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>es6中的import引入的永远是同一地址的对象，不管你在哪里import，都是一样的对象。如果想引入的是不同对象还是用require。这其实就是所谓的静态引用！</p>
</li>
<li><p>文件上传formdata处理模块：<a href="https://github.com/felixge/node-formidable" target="_blank" rel="external">formidable</a></p>
</li>
<li><p>项目里如果有传递表单(fields)数据，还请用全能小助手<a href="https://github.com/felixge/node-formidable" target="_blank" rel="external">formidable</a>，不要用坑爹的<code>body-parser</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> form = <span class="keyword">new</span> formidable.IncomingForm(); <span class="comment">// 实例化子类</span></div><div class="line">form.uploadDir = <span class="string">'./public/img/'</span> + type; <span class="comment">// 定义上传路径。注意：这里formidable是从node_modules来的，所以'./'所指的是整个程序的CWD。</span></div><div class="line">form.parse(req, <span class="keyword">async</span> (err, fields, files) =&gt; &#123; <span class="comment">// 转换formdata，指明callback是异步，里面有await！</span></div><div class="line">  <span class="comment">// 此时上传文件名字是随机的，需改名。</span></div><div class="line">  <span class="keyword">const</span> extname = path.extname(files.upload.name); <span class="comment">// 获取文件后缀名 .jpg</span></div><div class="line">  <span class="comment">// fs.unlink(files.upload.path) // 在尝试修改文件失败后记得截图与文件的链接</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>图片文件缩放模块： <a href="https://github.com/aheckmann/gm" target="_blank" rel="external">gm</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gm(repath) <span class="comment">// 缩放图片尺寸</span></div><div class="line">            .resize(<span class="number">400</span>, <span class="number">400</span>, <span class="string">'!'</span>) <span class="comment">// 限制大小</span></div><div class="line">            .write(repath, <span class="keyword">async</span> (err) =&gt; &#123;</div><div class="line">              <span class="keyword">if</span> (err) &#123; <span class="comment">// 尝试写入，报错则reject</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'改写图片尺寸失败'</span>);</div><div class="line">                fs.unlink(repath);</div><div class="line">                reject(err);</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                resolve(repath.replace(<span class="regexp">/^\.\/public/</span>, <span class="string">''</span>)); <span class="comment">// 所有成功只返回图片路径，替换'/publc'</span></div><div class="line">              &#125;</div><div class="line">            &#125;)</div></pre></td></tr></table></figure>
<ul>
<li>express中权限严重中间件</li>
</ul>
<p>需求：在路由中，除某小部分路由以外全部加入权限验证<br>实现：在router index中，先把不需要验证的路由写上面，需要验证的路由写下面，中间用<code>app.use(Middleware)</code>进行权限验证，在中间件中记得<code>next()</code>往下一步执行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;es6中的import引入的永远是同一地址的对象，不管你在哪里import，都是一样的对象。如果想引入的是不同对象还是用require。这其实就是所谓的静态引用！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文件上传formdata处理模块：&lt;a href=&quot;htt
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
      <category term="express" scheme="http://jerryshi.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>[vue2.0 happyfri]项目总结</title>
    <link href="http://jerryshi.com/2017/05/23/vue-happyfri-summart/"/>
    <id>http://jerryshi.com/2017/05/23/vue-happyfri-summart/</id>
    <published>2017-05-23T02:39:00.000Z</published>
    <updated>2017-05-23T02:40:14.363Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>其实应该叫GET到的知识点更好听点！</p>
</blockquote>
<ul>
<li><p>如果<code>XMLHttpRequest</code>不存在可以使用<code>ActiveXObject</code>来初始异步请求对象；</p>
</li>
<li><p><code>mapState</code>辅助函数，一次性生成三个计算属性。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">computed</span>: mapState(&#123;</div><div class="line">      <span class="attr">itemNum</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.itemNum,</div><div class="line">      <span class="attr">level</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.level,</div><div class="line">      <span class="attr">itemDetail</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.itemDetail</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>在项目components的<code>itemcontainer.vue</code>里，使用<code>v-if</code>判断存了两个page。通过父组件传入的<code>fatherComponent</code>判断是生成home页面还是item页面。</p>
</li>
<li><p>在<code>itemcontainer.vue</code>组件中，通过计算属性绑定输入题库数组中的题目和选项，然后通过按钮事件改编题库指针后切换下一题，同时还把所选选项唯一id保存。</p>
</li>
<li><p>项目流程图</p>
</li>
</ul>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/blog/wheel-happyfri%20flow%20chart.svg" alt="flowChart"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实应该叫GET到的知识点更好听点！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果&lt;code&gt;XMLHttpRequest&lt;/code&gt;不存在可以使用&lt;code&gt;ActiveXObject&lt;/code&gt;来初始异步请求对象；&lt;/p
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://jerryshi.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>[vue2.0 在线备忘录]项目总结</title>
    <link href="http://jerryshi.com/2017/05/18/vue-notepad-summary/"/>
    <id>http://jerryshi.com/2017/05/18/vue-notepad-summary/</id>
    <published>2017-05-18T12:30:00.000Z</published>
    <updated>2017-05-23T02:50:05.666Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Vuex。主要由<code>state</code>、<code>mutations</code>、<code>actions</code>和<code>getters</code>构成（<code>modules</code>为模块化）。<ul>
<li><code>state</code>好比数据库的具体实现，要存什么东西就它管了；</li>
<li><code>getters</code>好比可编程获取器，项目读取有些数据要排序过滤什么的，用它妥妥的;</li>
<li><code>mutations</code>，字面意思“突变”，“更改 Vuex 的 store 中的状态的唯一方法是提交 mutation”，可以看出要commit提交才能改变store的状态。<code>mutations</code>定义的是状态改变的方法，但我们不能直接调用<code>mutations</code>，我们需要用commit提交或者转交给<code>actions</code>来处理。<code>mutations</code>方法中第一个参数是state状态对象，而第二个参数是一个payload负载，负载可以是变量或者对象。<code>mutations</code>的方法必须是同步事务！</li>
<li><code>actions</code>，字面意思就是“动作”，但怎么动法请问<code>mutations</code>去，使用时需用<code>dispatch</code>调用<code>actions</code>。其有两个特点，只commit提交mutations方法，不能直接去修改store状态；可以提交<strong>异步</strong>操作。</li>
</ul>
</li>
</ul>
<hr>
<p>Vuex的运行流程</p>
<ul>
<li><code>self.$store.dispatch(&#39;addevent&#39;, params)</code>：在Store对象中，通过dispatch派遣一个actions动作，动作的名称叫’addevent’；</li>
<li>actions中，<code>addevent: ({ commit }, payload) =&gt; commit(&#39;ADDEVENT&#39;, {items: payload})</code>，找到明教’addevent’的动作，它带一个负载对象一并commit提交到<code>mutations</code>中；</li>
<li>mutations中，<code>ADDEVENT (states, payload) { states.list = payload.items}</code>，找到名叫’ADDEVENT’的方法名，操作states状态的改变；</li>
<li>views中，Vue框架根据state的改变自动更新视图views。</li>
<li>这样，一次完美的单向数据流执行完毕！</li>
</ul>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/flow.png" alt="actions"></p>
<hr>
<ul>
<li><p>如果项目复杂，选择模块化的使用store管理。例如event是一个store，而theme又是一个sotre。最后在定义中使用<code>module</code>关键字载入这些store;</p>
</li>
<li><p>父子组件通讯。在父组件的template中<code>&lt;nDialog :msg=&quot;tips&quot;&gt;&lt;/nDialog&gt;</code>；子组件中，<code>props: [&#39;msg&#39;]</code>。这样就在子组件中就可以使用由父组件传递进来<code>msg</code>变量。原则就是，父组件定义子组件时，在标签里提前预留一个标签，然后在子组件中定义一个属性数组接收，但要用引号引起属性名！</p>
</li>
<li><p>子组件调用父组件事件。在子组件的<code>methods</code>里定义方法，执行<code>this.$emit(&#39;cancel&#39;)</code>。此时子组件就会冒泡发散<code>cancel</code>这个动作；我们又得现在父组件定义子组件写<code>v-on:sure=&quot;sureDialog&quot;</code>，提前监听sure事件。这样子组件就可以调用到父组件的方法。</p>
</li>
<li><p>Vuex中，可以把sates的状态封装读写放到一个数据访问接口中。</p>
</li>
<li><p>localStore，话说这个HTML5 API真的很给力嘛。简单几个<code>getItem</code>，<code>setItem</code>和<code>removeItem</code>方法就搞定，其他真没什么说的。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Vuex。主要由&lt;code&gt;state&lt;/code&gt;、&lt;code&gt;mutations&lt;/code&gt;、&lt;code&gt;actions&lt;/code&gt;和&lt;code&gt;getters&lt;/code&gt;构成（&lt;code&gt;modules&lt;/code&gt;为模块化）。&lt;ul&gt;
&lt;li&gt;&lt;c
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
      <category term="vue" scheme="http://jerryshi.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>EASReport项目总结</title>
    <link href="http://jerryshi.com/2017/04/25/project-summary-easreport/"/>
    <id>http://jerryshi.com/2017/04/25/project-summary-easreport/</id>
    <published>2017-04-25T08:48:00.000Z</published>
    <updated>2017-05-23T02:52:09.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object-keys-方法解析"><a href="#Object-keys-方法解析" class="headerlink" title="Object.keys()方法解析"></a>Object.keys()方法解析</h3><ul>
<li>传入对象，返回属性名</li>
<li>传入字符串，返回索引</li>
<li>构造函数 返回空数组或者属性名</li>
<li>数组 返回索引</li>
</ul>
<h3 id="为Array添加一个分组方法"><a href="#为Array添加一个分组方法" class="headerlink" title="为Array添加一个分组方法"></a>为Array添加一个分组方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Array</span>.prototype, <span class="string">'group'</span>, &#123;</div><div class="line">  <span class="attr">enumerable</span>: <span class="literal">false</span>,    <span class="comment">//不可能枚举</span></div><div class="line">  value: <span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> map = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> k = key(e); <span class="comment">//‘key’其实是函数，循环时将数组中每个元素传入key函数求出某属性/字段的值</span></div><div class="line">      map[k] = map[k] || []; <span class="comment">//通过索引看分组的对象是否存在，不存在初始化空数组；</span></div><div class="line">      map[k].push(e); <span class="comment">//将原始元素推入数组</span></div><div class="line">    &#125;)</div><div class="line">    <span class="comment">//此时map对象结构：&#123;"你":[&#123;...&#125;,&#123;...&#125;], "我":[&#123;...&#125;,&#123;...&#125;,&#123;...&#125;], "他":&#123;[...]&#125;&#125;</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map).map(<span class="function"><span class="keyword">function</span> (<span class="params">k</span>) </span>&#123; <span class="comment">//拿到对象的属性数组，此时k为属性名</span></div><div class="line">      <span class="keyword">return</span> &#123; <span class="attr">key</span>: k, <span class="attr">data</span>: map[k] &#125;; <span class="comment">//此时修改map对象元素格式&#123;key: "你", data: [metadata]&#125;</span></div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>这函数真是精巧，不愧是从stackflow爬来的。</p>
</blockquote>
<h3 id="神一般存在的reduce函数"><a href="#神一般存在的reduce函数" class="headerlink" title="神一般存在的reduce函数"></a>神一般存在的reduce函数</h3><p>arr.reduce(callback[, initialValue]) </p>
<ul>
<li><p>callback（一个在数组中每一项上调用的函数，接受四个函数）：</p>
<ul>
<li>previousValue/accumulator（上一次调用回调函数时的返回值，或者初始值，当然也可以理解成累加器）</li>
<li>currentValue（当前正在处理的数组元素）</li>
<li>currentIndex（当前正在处理的数组元素下标）</li>
<li>array（调用reduce()方法的数组）</li>
<li>initialValue（可选的初始值。作为第一次调用回调函数时传给previousValue的值）</li>
</ul>
</li>
</ul>
<blockquote>
<p>项目中用它解决了很多统计、数组修改问题。还有个优点，reduce有效防止爆内存，因为V8递归时，调用栈超过一定数量就爆，但reduce有效避免了调用栈过多问题。</p>
</blockquote>
<h3 id="express-param-name-callback"><a href="#express-param-name-callback" class="headerlink" title="express().param([name], callback)"></a>express().param([name], callback)</h3><p>在路由中，可以检测req中的请求参数后处理。可以一个Router()的实例设置一个param。</p>
<h3 id="设计步骤"><a href="#设计步骤" class="headerlink" title="设计步骤"></a>设计步骤</h3><blockquote>
<p>首先，搭好项目框架。这个技能真只有多些项目，多读大牛的项目来提升；<br>其次，编码过程中最好附带写好文档，如果可以提前写好文档。例如某个处理流程中对象的结果，明确的写出来。<br>最后，做好测试。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Object-keys-方法解析&quot;&gt;&lt;a href=&quot;#Object-keys-方法解析&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()方法解析&quot;&gt;&lt;/a&gt;Object.keys()方法解析&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;传入对象，返
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>当年博客顶峰时期的截图</title>
    <link href="http://jerryshi.com/2017/04/23/blog-screenshot-20140329/"/>
    <id>http://jerryshi.com/2017/04/23/blog-screenshot-20140329/</id>
    <published>2017-04-23T12:33:00.000Z</published>
    <updated>2017-05-21T02:34:30.015Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>突然看到截个图留念</p>
</blockquote>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/blog_pic2.jpg" alt="pic1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;突然看到截个图留念&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://ofx24fene.bkt.clouddn.com//img/2017/blog_pic2.jpg&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://jerryshi.com/categories/life/"/>
    
    
      <category term="日记" scheme="http://jerryshi.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果关于b150m主板桌面H530初始化问题</title>
    <link href="http://jerryshi.com/2017/03/24/hackintosh-gpu-issue/"/>
    <id>http://jerryshi.com/2017/03/24/hackintosh-gpu-issue/</id>
    <published>2017-03-24T01:46:00.000Z</published>
    <updated>2017-05-21T02:35:02.331Z</updated>
    
    <content type="html"><![CDATA[<p>最近在GA-B150M-D3H主板和I3-6100上装黑苹果，其他所有问题都完美，就是显卡初始化有问题，我也在pcbeta、tonymacx86、insanelymac上爬帖无数，仍是无果，但我跑Geekbench4的GPU部分分数却很正常，罢了，不去浪费时间了。</p>
<p>问题描述，这个图其实很难抓拍，不到半秒~<br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/WechatIMG2-squashed.jpeg" alt="01"></p>
<p>跑分明明很正常啊。<br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/geekbench2.png" alt="02"></p>
<p>关于此问题的探索止步于：<a href="https://pikeralpha.wordpress.com/2017/01/14/does-apple-load-microcode-for-the-igpu/" target="_blank" rel="external">Pike’s Universum - Does Apple load microcode for the IGPU?</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在GA-B150M-D3H主板和I3-6100上装黑苹果，其他所有问题都完美，就是显卡初始化有问题，我也在pcbeta、tonymacx86、insanelymac上爬帖无数，仍是无果，但我跑Geekbench4的GPU部分分数却很正常，罢了，不去浪费时间了。&lt;/p&gt;

    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="hackintosh" scheme="http://jerryshi.com/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果(i3-6100&amp;ga-b150mD3H-SM961)实践记录</title>
    <link href="http://jerryshi.com/2017/03/14/hackintosh-b150d3h-sm961/"/>
    <id>http://jerryshi.com/2017/03/14/hackintosh-b150d3h-sm961/</id>
    <published>2017-03-14T14:51:05.000Z</published>
    <updated>2017-03-17T06:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周，又装了一台黑苹果，这台机子主要在办公室用。因为要上nvme版本的sm961，遇到了N多坑啊！目前所有设备工作基本完美，除了HD530显卡有点小瑕疵，还需调试。</p>
<blockquote>
<p>配置：</p>
<ul>
<li>intel i3-6100</li>
<li>ga-b150m-d3h</li>
<li>G.SKILL DDR4-2400MHz 8GB*2</li>
<li>Samsung sm961 256G (nvme)</li>
<li>Dell P2417 (hdmi)</li>
</ul>
</blockquote>
<p>第一步：做U盘启动盘，写入10.12.2系统。</p>
<p>第二步：设置UEFI。</p>
<p>第三步：插入U盘系统。</p>
<p>第四步：发现写入系统后无法启动！挂彩~</p>
<hr>
<p>正确的步骤：<br>Step1：做U盘启动。然后在另一台Mac上用clover挂载U盘EFI里给config手工打上nvme补丁(<a href="https://github.com/RehabMan/patch-nvme" target="_blank" rel="external">链接</a>).注意千万不能按照大神教程删除系统自带的IONVMeFamily.kext，否则一样挂彩！</p>
<p>Step2：设置主板UEFI。</p>
<ul>
<li>还原默认选项，</li>
<li><code>vt-d</code>、<code>IOAPIC 24-119</code>、<code>Fast boot</code>、<code>Secure boot</code>、<code>Serial Port</code> —&gt; <strong>disable</strong> </li>
<li><code>XHCI Hand-off</code> —&gt; <strong>enabled</strong></li>
</ul>
<p>Step3：装系统。然后果断MultiBeast，配置如图。</p>
<p>Step4：后期优化。首先肯定打nvme补丁。</p>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/01summary.png" alt="01"><br><a id="more"></a></p>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/00multibeats.png" alt="00"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/02summary.png" alt="02"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/03nvmeSSD.png" alt="03"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/04IGX.png" alt="04"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/05sleeping.png" alt="05"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/06Speed.min.png" alt="06"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-16%20%E4%B8%8A%E5%8D%8810.13.14.png" alt="07"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上周，又装了一台黑苹果，这台机子主要在办公室用。因为要上nvme版本的sm961，遇到了N多坑啊！目前所有设备工作基本完美，除了HD530显卡有点小瑕疵，还需调试。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;intel i3-6100&lt;/li&gt;
&lt;li&gt;ga-b150m-d3h&lt;/li&gt;
&lt;li&gt;G.SKILL DDR4-2400MHz 8GB*2&lt;/li&gt;
&lt;li&gt;Samsung sm961 256G (nvme)&lt;/li&gt;
&lt;li&gt;Dell P2417 (hdmi)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步：做U盘启动盘，写入10.12.2系统。&lt;/p&gt;
&lt;p&gt;第二步：设置UEFI。&lt;/p&gt;
&lt;p&gt;第三步：插入U盘系统。&lt;/p&gt;
&lt;p&gt;第四步：发现写入系统后无法启动！挂彩~&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;正确的步骤：&lt;br&gt;Step1：做U盘启动。然后在另一台Mac上用clover挂载U盘EFI里给config手工打上nvme补丁(&lt;a href=&quot;https://github.com/RehabMan/patch-nvme&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;).注意千万不能按照大神教程删除系统自带的IONVMeFamily.kext，否则一样挂彩！&lt;/p&gt;
&lt;p&gt;Step2：设置主板UEFI。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还原默认选项，&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vt-d&lt;/code&gt;、&lt;code&gt;IOAPIC 24-119&lt;/code&gt;、&lt;code&gt;Fast boot&lt;/code&gt;、&lt;code&gt;Secure boot&lt;/code&gt;、&lt;code&gt;Serial Port&lt;/code&gt; —&amp;gt; &lt;strong&gt;disable&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;XHCI Hand-off&lt;/code&gt; —&amp;gt; &lt;strong&gt;enabled&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step3：装系统。然后果断MultiBeast，配置如图。&lt;/p&gt;
&lt;p&gt;Step4：后期优化。首先肯定打nvme补丁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ofx24fene.bkt.clouddn.com//img/2017/01summary.png&quot; alt=&quot;01&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[pluralsight]Object-oriented Programming in JavaScript - ES6</title>
    <link href="http://jerryshi.com/2017/03/02/pluralsight-Object-oriented-Programming-in-JavaScript-ES6/"/>
    <id>http://jerryshi.com/2017/03/02/pluralsight-Object-oriented-Programming-in-JavaScript-ES6/</id>
    <published>2017-03-02T01:23:00.000Z</published>
    <updated>2017-05-23T02:50:57.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>其实这个教程几个月前已经看过，但没做笔记，结果忘了，悲剧。从以后起每看一个教程好好做笔记，以后得翻看的！</p>
</blockquote>
<h4 id="Prepare"><a href="#Prepare" class="headerlink" title="Prepare"></a><strong>Prepare</strong></h4><p>Tooling Setup<br>package:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"lite-server"</span></div><div class="line">  &#125;,</div><div class="line"> <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"es6-module-loader"</span>: <span class="string">"^0.17.11"</span>,</div><div class="line">    <span class="string">"jquery"</span>: <span class="string">"^2.2.3"</span>,</div><div class="line">    <span class="string">"material-design-lite"</span>: <span class="string">"^1.1.3"</span>,</div><div class="line">    <span class="string">"systemjs"</span>: <span class="string">"^0.19.27"</span>,</div><div class="line">    <span class="string">"traceur"</span>: <span class="string">"0.0.108"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"lite-server"</span>: <span class="string">"^2.2.0"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Class-Basics"><a href="#Class-Basics" class="headerlink" title="Class Basics"></a><strong>Class Basics</strong></h4><p>Class Creation</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">calss Drone &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone = <span class="keyword">new</span> Drone();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> Drone); <span class="comment">// --&gt; function</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> drone); <span class="comment">// --&gt; object</span></div><div class="line"><span class="built_in">console</span>.log(drone <span class="keyword">instanceof</span> Drone); <span class="comment">// --&gt; function</span></div></pre></td></tr></table></figure>
<p>Constructors and Properies<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'in Drone constructor'</span>);</div><div class="line">    <span class="built_in">console</span>.log(id + <span class="string">'_'</span> + name);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone = <span class="keyword">new</span> Drone(<span class="string">'A888'</span>, <span class="string">'BMW'</span>); <span class="comment">// --&gt; in Drone constructor \n A888_BMW</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone = <span class="keyword">new</span> Drone(<span class="string">'A888'</span>, <span class="string">'BMW'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'drone: '</span> + drone.id + <span class="string">'_'</span> + drone[name]); <span class="comment">// --&gt; drone: A888_BMW</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>Static Propertise<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Drone.maxHeight = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone1 = <span class="keyword">new</span> Drone(<span class="string">'A111'</span>, <span class="string">'BMW'</span>);</div><div class="line"><span class="keyword">let</span> drone2 = <span class="keyword">new</span> Drone(<span class="string">'B222'</span>, <span class="string">'AUDI'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(Drone.maxHeight);  <span class="comment">// --&gt; 2000</span></div><div class="line"><span class="built_in">console</span>.log(drone2.maxHeight); <span class="comment">// --&gt; undefined  (*类的实例无法访问静态属性)</span></div></pre></td></tr></table></figure></p>
<p>Methdos<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  fly() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Drone '</span> + <span class="keyword">this</span>.id + <span class="string">'is flying.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Drone.maxHeight = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone1 = <span class="keyword">new</span> Drone(<span class="string">'A111'</span>, <span class="string">'BMW'</span>);</div><div class="line"><span class="keyword">let</span> drone2 = <span class="keyword">new</span> Drone(<span class="string">'B222'</span>, <span class="string">'AUDI'</span>);</div><div class="line"></div><div class="line">drone1.fly();  <span class="comment">// --&gt; A111 is flying.</span></div><div class="line">drone2.fly();  <span class="comment">// --&gt; B222 is flying.</span></div></pre></td></tr></table></figure></p>
<p>Static Methdos<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id, name) &#123;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span> getCompany() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'in getCompany.'</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span> getCompany2() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  fly() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Drone '</span> + <span class="keyword">this</span>.id + <span class="string">'is flying.'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">Drone.maxHeight = <span class="number">2000</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone1 = <span class="keyword">new</span> Drone(<span class="string">'A111'</span>, <span class="string">'BMW'</span>);</div><div class="line"><span class="keyword">let</span> drone2 = <span class="keyword">new</span> Drone(<span class="string">'B222'</span>, <span class="string">'AUDI'</span>);</div><div class="line"></div><div class="line">drone.getCompany(); <span class="comment">// --&gt; Object doesn't support propery or method 'getCompany'</span></div><div class="line">Drone.getCompany2(); <span class="comment">// --&gt; undefined (*静态方法无法访问到实例的属性)</span></div></pre></td></tr></table></figure></p>
<p>Getters and Setters<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(id) &#123;</div><div class="line">    <span class="keyword">this</span>._id = id;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  get id() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'in id getter'</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._id;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  set id(value) &#123;</div><div class="line">    <span class="keyword">this</span>._id = value;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> drone1 = <span class="keyword">new</span> Drone(<span class="string">'A111'</span>);</div><div class="line">drone1.id = <span class="string">'B222'</span>; <span class="comment">// 算是语法糖了</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'drone1.id: '</span> + drone1.id); <span class="comment">// --&gt; in id getter \n drone1.id: B222</span></div></pre></td></tr></table></figure></p>
<h4 id="Inheritance-and-Code-Organization"><a href="#Inheritance-and-Code-Organization" class="headerlink" title="Inheritance and Code Organization"></a><strong>Inheritance and Code Organization</strong></h4><p>Extending a Class<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car();</div><div class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> Car); <span class="comment">// --&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> Vehicle); <span class="comment">// --&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(c <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// --&gt;true</span></div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A[Car] --&gt; |extends| C(Vehicle)</div><div class="line">B[Drone] --&gt; |extends| C</div><div class="line">C --&gt; |extends| D(Object)</div></pre></td></tr></table></figure>
<p><img src="http://ofx24fene.bkt.clouddn.com/img/2017/liuc1.jpg" alt=""></p>
<p>Inherting Constructor<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'constructing Vehicle'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Car extends Vehicle &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>(); <span class="comment">// 这里不管父类有没显示声明构造函数都必须调用super函数</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'constructing Car'</span>);</div><div class="line">  &#125; <span class="comment">// 这里为什么非要调用super函数呢？下例中解释。</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 这里注意顺序：先父类再子类的构造函数</span></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car(); <span class="comment">// constrcting Vehicle \n constructing Car</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(licenseNum) &#123;</div><div class="line">    <span class="keyword">this</span>.licenseNum = licenseNum;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Car extends Vehicle &#123;</div><div class="line">  <span class="keyword">constructor</span>(licenseNum) &#123;</div><div class="line">    <span class="keyword">super</span>(licenseNum); <span class="comment">// 强制调用super是为了父类服务</span></div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car(A111); <span class="comment">// constrcting Vehicle \n constructing Car</span></div><div class="line"><span class="built_in">console</span>.log(c.licenseNum); <span class="comment">// --&gt; A111</span></div></pre></td></tr></table></figure>
<h5 id="Inherting-Properties"><a href="#Inherting-Properties" class="headerlink" title="Inherting Properties"></a>Inherting Properties</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.gpsEnable = <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drone</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Class Car extends Vehicle &#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">this</span>.gpsEnable = <span class="literal">false</span>;</div><div class="line">    <span class="comment">// super(); // 如果super()放在this后执行则报错</span></div><div class="line">  &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car();</div><div class="line"><span class="built_in">console</span>.log(c.gpsEnbale); <span class="comment">// --&gt; false</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    start() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'staring Vehicle'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> getCompanyName() &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'My Company'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">    start() &#123;</div><div class="line">        <span class="keyword">super</span>.start();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'staring Car'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> getCompanyName() &#123;</div><div class="line">        <span class="keyword">super</span>.getCompanyName();</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'My Other Company'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car();</div><div class="line">c.start(); <span class="comment">// --&gt; staring Vehicle \n staring Car (顺序：父类后再子类)</span></div><div class="line">Car.getCompanyName(); <span class="comment">// --&gt; My Company \n My Other Company</span></div><div class="line"><span class="comment">//c.getCompanyName(); // 无法访问到静态方法</span></div></pre></td></tr></table></figure>
<h5 id="Inheritance-and-Code-Organization-1"><a href="#Inheritance-and-Code-Organization-1" class="headerlink" title="Inheritance and Code Organization"></a>Inheritance and Code Organization</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./classes/Vehicle.js</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">////////////////////////////////////</span></div><div class="line"><span class="comment">// ./classes/Car.js</span></div><div class="line"><span class="keyword">import</span> &#123;Vehicle&#125; <span class="keyword">from</span> <span class="string">'./vehicle.js'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"><span class="comment">////////////////////////////////////</span></div><div class="line"><span class="comment">// ./classes/Drone.js</span></div><div class="line"><span class="keyword">import</span> &#123;Vehicle&#125; <span class="keyword">from</span> <span class="string">'./vehicle.js'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Drone</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"><span class="comment">////////////////////////////////////</span></div><div class="line"><span class="comment">// ../app.js</span></div><div class="line"><span class="keyword">import</span> &#123;Car&#125; fomr <span class="string">'./classes/car.js'</span></div><div class="line"><span class="keyword">import</span> &#123;Drone&#125; fomr <span class="string">'./classes/drone.js'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Car();</div><div class="line"><span class="keyword">let</span> d = <span class="keyword">new</span> Drone();</div><div class="line"><span class="comment">// v = new Vehicle(); // undefined</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c);</div><div class="line"><span class="built_in">console</span>.log(d);</div></pre></td></tr></table></figure>
<h4 id="Creating-a-Data-Service-Class"><a href="#Creating-a-Data-Service-Class" class="headerlink" title="Creating a Data Service Class"></a><strong>Creating a Data Service Class</strong></h4><h5 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h5>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;其实这个教程几个月前已经看过，但没做笔记，结果忘了，悲剧。从以后起每看一个教程好好做笔记，以后得翻看的！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Prepare&quot;&gt;&lt;a href=&quot;#Prepare&quot; class=&quot;headerlink&quot; title=&quot;Prepare&quot;&gt;&lt;/a&gt;&lt;strong&gt;Prepare&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Tooling Setup&lt;br&gt;package:&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;dev&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;lite-server&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;es6-module-loader&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.17.11&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;jquery&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.2.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;material-design-lite&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^1.1.3&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;systemjs&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^0.19.27&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;traceur&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.108&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;lite-server&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^2.2.0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;Class-Basics&quot;&gt;&lt;a href=&quot;#Class-Basics&quot; class=&quot;headerlink&quot; title=&quot;Class Basics&quot;&gt;&lt;/a&gt;&lt;strong&gt;Class Basics&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Class Creation&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;calss Drone &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; drone = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Drone();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; Drone); &lt;span class=&quot;comment&quot;&gt;// --&amp;gt; function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; drone); &lt;span class=&quot;comment&quot;&gt;// --&amp;gt; object&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(drone &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Drone); &lt;span class=&quot;comment&quot;&gt;// --&amp;gt; function&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Constructors and Properies&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Drone&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(id, name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;in Drone constructor&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(id + &lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt; + name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; drone = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Drone(&lt;span class=&quot;string&quot;&gt;&#39;A888&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;BMW&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// --&amp;gt; in Drone constructor \n A888_BMW&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Drone&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(id, name) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id = id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; drone = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Drone(&lt;span class=&quot;string&quot;&gt;&#39;A888&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;BMW&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;drone: &#39;&lt;/span&gt; + drone.id + &lt;span class=&quot;string&quot;&gt;&#39;_&#39;&lt;/span&gt; + drone[name]); &lt;span class=&quot;comment&quot;&gt;// --&amp;gt; drone: A888_BMW&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>黑苹果（z97-a_4790K）之实操完美结束</title>
    <link href="http://jerryshi.com/2017/02/03/%E9%BB%91%E8%8B%B9%E6%9E%9C%EF%BC%88z97-a-4790K%EF%BC%89%E4%B9%8B%E5%AE%9E%E6%93%8D%E5%AE%8C%E6%AF%95/"/>
    <id>http://jerryshi.com/2017/02/03/黑苹果（z97-a-4790K）之实操完毕/</id>
    <published>2017-02-03T01:26:51.000Z</published>
    <updated>2017-03-17T06:23:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过不下50次的重启电脑，终于把黑苹果调试完毕。</p>
<p>其实一开始只有唤醒有问题，其他都完美。但又不甘心，不停折腾，期间先把hdmi调了关显示器就休眠，然后上vga又失败，然后调试usb设备，然后偶尔几次唤醒完美，然后又开机不自检等各种问题，最终还是整完美了！</p>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/summary.png" alt="系统概况"></p>
<a id="more"></a>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/USB.png" alt="USB"><br><img src="http://ofx24fene.bkt.clouddn.com//img/2017/SSD.png" alt="SSD"><br><img src="http://ofx24fene.bkt.clouddn.com/NET.png" alt="NET"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/mac_gpu.png" alt="显卡"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/mac_mem.png" alt="内存"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/mac_au.png" alt="音频"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/mac_psu.png" alt="电源"></p>
<p>Geekbench跑分如下:<br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/geekbench1.png" alt="geekbench1"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/geekbench2.png" alt="geekbench2"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/geekbench3.png" alt="geekbench3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过不下50次的重启电脑，终于把黑苹果调试完毕。&lt;/p&gt;
&lt;p&gt;其实一开始只有唤醒有问题，其他都完美。但又不甘心，不停折腾，期间先把hdmi调了关显示器就休眠，然后上vga又失败，然后调试usb设备，然后偶尔几次唤醒完美，然后又开机不自检等各种问题，最终还是整完美了！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ofx24fene.bkt.clouddn.com//img/2017/summary.png&quot; alt=&quot;系统概况&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>黑苹果（MacOS Sierra 10.12.22）之4790K实践手记</title>
    <link href="http://jerryshi.com/2017/01/24/%E9%BB%91%E8%8B%B9%E6%9E%9C%EF%BC%88hackintosh%EF%BC%89%E4%B9%8B4790K%E5%AE%9E%E8%B7%B5%E6%89%8B%E8%AE%B0/"/>
    <id>http://jerryshi.com/2017/01/24/黑苹果（hackintosh）之4790K实践手记/</id>
    <published>2017-01-24T08:18:00.000Z</published>
    <updated>2017-01-24T15:47:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先查了下资料：[Building a CustoMac: Buyer’s Guide January 2016][1]</p>
<p>再看看我的配置：</p>
<ul>
<li>Core i7-4790K</li>
<li>Z97-A/USB 3.1 (<a href="http://www.asus.com.cn/Motherboards/Z97AUSB_31/" target="_blank" rel="external">http://www.asus.com.cn/Motherboards/Z97AUSB_31/</a>)</li>
<li>SSD: Samsung 850 EVO 250GB</li>
<li>RAM: G.SKILL F3-2400C11S-8GSR*2</li>
<li>Cases: JONSBO QT01</li>
<li>PSUs: SUPER FLOWER SF-550P14XE</li>
<li>Accessories: Intel 7260AC 867M</li>
</ul>
<p>结论是除了7260的无限网卡不行以外其他都OK，那么就开始做吧。</p>
<p>在看教程时，发现<code>UniBeast</code>在竟然是在OS X系统下才能运行，再者找了macOS Sierra半天，没找到地方下。好吧，哥只能在VM里先装个<code>OS X 10.11 EI Capitan</code>，然后下macOS Sierra和运行<code>UniBeast</code>。然后就开始装了，一路顺畅啊！</p>
<blockquote>
<p>有点搞笑的是，台式机没条件接有线，还好我儿子不知从拿个箱子里翻出来一个2013年买的TL-WR800N便携路由出来把玩，我上官网看了下其竟然有“Client”工作模式，可以把无线信号转成有线的，果断用起！但问题是用了TL-WR800N后下测速只有100M左右速度，而我家宽带是200M。</p>
</blockquote>
<p><img src="http://ofx24fene.bkt.clouddn.com/img/2017/IMG_20170123_224524_Jc.jpg" alt="img0"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2017/IMG_20170124_002300_Jc.jpg" alt="img1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先查了下资料：[Building a CustoMac: Buyer’s Guide January 2016][1]&lt;/p&gt;
&lt;p&gt;再看看我的配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core i7-4790K&lt;/li&gt;
&lt;li&gt;Z97-A/USB 3.1 (&lt;a href=&quot;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="hackintosh" scheme="http://jerryshi.com/tags/hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>电信200M光宽带安装体验记</title>
    <link href="http://jerryshi.com/2017/01/12/%E7%94%B5%E4%BF%A1200M%E5%85%89%E5%AE%BD%E5%B8%A6%E5%AE%89%E8%A3%85%E4%BD%93%E9%AA%8C%E8%AE%B0/"/>
    <id>http://jerryshi.com/2017/01/12/电信200M光宽带安装体验记/</id>
    <published>2017-01-12T06:22:00.000Z</published>
    <updated>2017-01-25T13:02:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年12月底，经过不假思索的考虑就装了200M的电信光宽带，后来想想，觉得还真事有点被坑的感觉。</p>
<p>宽带套餐和费用如下：</p>
<ul>
<li>200M电信宽带一条</li>
<li>三张手机卡，其中月流量为1G全国和16G市内，1000分钟通话</li>
<li>高清机顶盒／1000M光线猫各一个</li>
<li>费用为：848初次缴费，有200元实时网费，以后每月交159，套餐期5年！</li>
</ul>
<p>使用下来速度倒是的确快了，相比昆广网络，但真没多少资源速度能到24MB/s啊，除非连昆明电信机房测速！</p>
<p>期间，为了把无线网络速度爆满，买了个800块网件的R7000无线路由，后来发现台式机USB无线网卡是个坑，又买了120块的intel-7260-876M PCI网卡(后来玩黑苹果发现这货不行，得换tp的n900)。后来速度终于爆满了。还把R7000刷了梅林固件小宝版，装了ss在路由器里，用起来效果不错哦！</p>
<p><img src="http://ofx24fene.bkt.clouddn.com//img/2017/%E6%97%A0%E6%A0%87%E9%A2%98%E5%AE%BD%E5%B8%A63.png" alt="img1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年12月底，经过不假思索的考虑就装了200M的电信光宽带，后来想想，觉得还真事有点被坑的感觉。&lt;/p&gt;
&lt;p&gt;宽带套餐和费用如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200M电信宽带一条&lt;/li&gt;
&lt;li&gt;三张手机卡，其中月流量为1G全国和16G市内，1000分钟通话&lt;/l
    
    </summary>
    
      <category term="生活" scheme="http://jerryshi.com/categories/life/"/>
    
    
      <category term="network" scheme="http://jerryshi.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包的底层运行机制</title>
    <link href="http://jerryshi.com/2017/01/10/JavaScript%E9%97%AD%E5%8C%85%E7%9A%84%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://jerryshi.com/2017/01/10/JavaScript闭包的底层运行机制/</id>
    <published>2017-01-10T09:02:00.000Z</published>
    <updated>2017-05-23T02:52:39.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-do-JavaScript-closures-work-under-the-hood"><a href="#How-do-JavaScript-closures-work-under-the-hood" class="headerlink" title="How do JavaScript closures work under the hood"></a>How do JavaScript closures work under the hood</h1><hr>
<blockquote>
<p>昨天晚上看《JavaScript权威指南》正好看到闭包，此时已经是12点多，心想赶着看完睡觉，太晚睡长痘痘。结果把最后一个例子看完，大脑里还是懵的。然后又上YouTube看了下视频教程，但讲的还是有点懵，索性关机睡觉。第二天上午，赶紧上<code>stackoverflow</code>和<code>quora</code>搜索，结果就搜到这篇文字，写得太好了，就转载在博客里以后反复研读。</p>
</blockquote>
<p>我研究JavaScript闭包（closure）已经有一段时间了。我之前只是学会了如何使用它们，而没有透彻地了解它们具体是如何运作的。那么，究竟什么是闭包？</p>
<p>Wikipedia给出的解释并没有太大的帮助。闭包是什么时候被创建的，什么时候被销毁的？具体的实现又是怎么样的？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> myClosure = (<span class="function"><span class="keyword">function</span> <span class="title">outerFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> hidden = <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">inc</span>: <span class="function"><span class="keyword">function</span> <span class="title">innerFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> hidden++;</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;());</div><div class="line">myClosure.inc();  <span class="comment">// 返回 1</span></div><div class="line">myClosure.inc();  <span class="comment">// 返回 2</span></div><div class="line">myClosure.inc();  <span class="comment">// 返回 3</span></div><div class="line"><span class="comment">// 相信对JS熟悉的朋友都能很快理解这段代码</span></div><div class="line"><span class="comment">// 那么在这段代码运行的背后究竟发生了怎样的事情呢？</span></div></pre></td></tr></table></figure>
<p>现在，我终于知道了答案，我感到很兴奋并且决定向大家解释这个答案。至少，我一定是不会忘记这个答案的。</p>
<blockquote>
<p>Tell me and I forget. Teach me and I remember. Involve me and I learn.<br>© Benjamin Franklin</p>
</blockquote>
<p>并且，在我阅读与闭包相关的现存的资料时，我很努力地尝试着去在脑海中想想每个事物之间的联系：对象之间是如何引用的，对象之间的继承关系是什么，等等。我找不到关于这些负责关系的很好的图表，于是我决定自己画一些。</p>
<p>我将假设读者对JavaScript已经比较熟悉了，知道什么是全局对象，知道函数在JavaScript当中是“first-class objects”，等等。</p>
<a id="more"></a>
<h2 id="作用域链（Scope-Chain）"><a href="#作用域链（Scope-Chain）" class="headerlink" title="作用域链（Scope Chain）"></a>作用域链（Scope Chain）</h2><p>当JavaScript在运行的时候，它需要一些空间让它来存储本地变量（local variables）。我们将这些空间称为作用域对象（Scope object），有时候也称作LexicalEnvironment。例如，当你调用函数时，函数定义了一些本地变量，这些变量就被存储在一个作用域对象中。你可以将作用域函数想象成一个普通的JavaScript对象，但是有一个很大的区别就是你不能够直接在JavaScript当中直接获取这个对象。你只可以修改这个对象的属性，但是你不能够获取这个对象的引用。</p>
<p>作用域对象的概念使得JavaScript和C、C++非常不同。在C、C++中，本地变量被保存在栈（stack）中。<strong>在JavaScript中，作用域对象是在堆中被创建的（至少表现出来的行为是这样的），所以在函数返回后它们也还是能够被访问到而不被销毁。</strong></p>
<p>正如你做想的，作用域对象是可以有父作用域对象（parent scope object）的。当代码试图访问一个变量的时候，解释器将在当前的作用域对象中查找这个属性。如果这个属性不存在，那么解释器就会在父作用域对象中查找这个属性。就这样，一直向父作用域对象查找，直到找到该属性或者再也没有父作用域对象。我们将这个查找变量的过程中所经过的作用域对象乘坐作用域链（Scope chain）。</p>
<p>在作用域链中查找变量的过程和原型继承（prototypal inheritance）有着非常相似之处。但是，非常不一样的地方在于，当你在原型链（prototype chain）中找不到一个属性的时候，并不会引发一个错误，而是会得到<code>undefined</code>。但是如果你试图访问一个作用域链中不存在的属性的话，你就会得到一个<code>ReferenceError</code>。</p>
<p>在作用域链的最顶层的元素就是全局对象（Global Object）了。运行在全局环境的JavaScript代码中，作用域链始终只含有一个元素，那就是全局对象。所以，当你在全局环境中定义变量的时候，它们就会被定义到全局对象中。当函数被调用的时候，作用域链就会包含多个作用域对象。</p>
<h2 id="全局环境中运行的代码"><a href="#全局环境中运行的代码" class="headerlink" title="全局环境中运行的代码"></a>全局环境中运行的代码</h2><p>好了，理论就说到这里。接下来我们来从实际的代码入手。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// my_script.js</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>我们在全局环境中创建了两个变量。正如我刚才所说，此时的作用域对象就是全局对象。</p>
<p><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_1.png" alt="img1"></p>
<p>在上面的代码中，我们有一个执行的上下文（myscript.js自身的代码），以及它所引用的作用域对象。全局对象里面还含有很多不同的属性，在这里我们就忽略掉了。</p>
<h2 id="没有被嵌套的函数（Non-nested-functions）"><a href="#没有被嵌套的函数（Non-nested-functions）" class="headerlink" title="没有被嵌套的函数（Non-nested functions）"></a>没有被嵌套的函数（Non-nested functions）</h2><p>接下来，我们看这段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//-- define local-to-function variables</span></div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">  <span class="keyword">var</span> foo = <span class="number">3</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"inside myFunc"</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"outside"</span>);</div><div class="line"><span class="comment">//-- and then, call it:</span></div><div class="line">myFunc();</div></pre></td></tr></table></figure></p>
<p>当<code>myFunc</code>被定义的时候，<code>myFunc</code>的标识符（identifier）就被加到了当前的作用域对象中（在这里就是全局对象），并且这个标识符所引用的是一个函数对象（function object）。函数对象中所包含的是函数的源代码以及其他的属性。其中一个我们所关心的属性就是内部属性<code>[[scope]]</code>。<code>[[scope]]</code>所指向的就是当前的作用域对象。也就是指的就是函数的标识符被创建的时候，我们所能够直接访问的那个作用域对象（在这里就是全局对象）。</p>
<blockquote>
<p>“直接访问”的意思就是，在当前作用域链中，该作用域对象处于最底层，没有子作用域对象。</p>
</blockquote>
<p>所以，在<code>console.log(&quot;outside&quot;)</code>被运行之前，对象之间的关系是如下图所示。<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_2.png" alt="img2"></p>
<p>温习一下。<code>myFunc</code>所引用的函数对象其本身不仅仅含有函数的代码，并且还含有指向其<strong>被创建的时候的作用域对象</strong>。这一点<strong>非常重要</strong>！</p>
<p>当<code>myFunc</code>函数被调用的时候，一个新的作用域对象被创建了。新的作用域对象中包含<code>myFunc</code>函数所定义的本地变量，以及其参数（arguments）。这个新的作用域对象的父作用域对象就是在运行myFunc时我们所能直接访问的那个作用域对象。</p>
<p>所以，当<code>myFunc</code>被执行的时候，对象之间的关系如下图所示。<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_3.png" alt="img3"></p>
<p>现在我们就拥有了一个作用域链。当我们试图在myFunc当中访问某些变量的时候，JavaScript会先在其能直接访问的作用域对象（这里就是myFunc() scope）当中查找这个属性。如果找不到，那么就在它的父作用域对象当中查找（在这里就是Global Object）。如果一直往上找，找到没有父作用域对象为止还没有找到的话，那么就会抛出一个ReferenceError。</p>
<p>例如，如果我们在myFunc中要访问a这个变量，那么在myFunc scope当中就可以找到它，得到值为1。</p>
<p>如果我们尝试访问foo，我们就会在<code>myFunc() scope</code>中得到<code>3</code>。只有在<code>myFunc() scope</code>里面找不到foo的时候，JavaScript才会往Global Object去查找。所以，这里我们不会访问到Global Object里面的foo。</p>
<p>如果我们尝试访问<code>bar</code>，我们在<code>myFunc() scope</code>当中找不到它，于是就会在Global Object当中查找，因此查找到2。</p>
<p>很重要的是，只要这些作用域对象依然被引用，它们就不会被垃圾回收器（garbage collector）销毁，我们就一直能访问它们。当然，当引用一个作用域对象的最后一个引用被解除的时候，并不代表垃圾回收器会立刻回收它，只是它现在可以被回收了。</p>
<p>所以，当<code>myFunc()</code>返回的时候，再也没有人引用<code>myFunc() scope</code>了。当垃圾回收结束后，对象之间的关系变成回了调用前的关系。<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_2.png" alt="img4"></p>
<p>接下来，为了图表直观起见，我将不再将函数对象画出来。但是，请永远记着，函数对象里面的[[scope]]属性，保存着该函数被定义的时候所能够直接访问的作用域对象。</p>
<h2 id="嵌套的函数（Nested-functions）"><a href="#嵌套的函数（Nested-functions）" class="headerlink" title="嵌套的函数（Nested functions）"></a>嵌套的函数（Nested functions）</h2><p>正如前面所说，当一个函数返回后，没有其他对象会保存对其的引用。所以，它就可能被垃圾回收器回收。但是如果我们在函数当中定义嵌套的函数并且返回，被调用函数的一方所存储呢？（如下面的代码）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> innerFunc() &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> innerFunc = myFunc();</div></pre></td></tr></table></figure>
<p>你已经知道的是，函数对象中总是有一个<code>[[scope]]</code>属性，保存着该函数被定义的时候所能够直接访问的作用域对象。所以，当我们在定义嵌套的函数的时候，这个嵌套的函数的<code>[[scope]]</code>就会引用外围函数（Outer function）的当前作用域对象。</p>
<p>如果我们将这个嵌套函数返回，并被另外一个地方的标识符所引用的话，那么这个嵌套函数及其<code>[[scope]]</code>所引用的作用域对象就不会被垃圾回收所销毁。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCounter</span>(<span class="params">initial</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = initial;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">    counter += value;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> counter;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">increment</span>: increment,</div><div class="line">    <span class="attr">get</span>: get</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myCounter = createCounter(<span class="number">100</span>);</div><div class="line"><span class="built_in">console</span>.log(myCounter.get());   <span class="comment">// 返回 100</span></div><div class="line">myCounter.increment(<span class="number">5</span>);</div><div class="line"><span class="built_in">console</span>.log(myCounter.get());   <span class="comment">// 返回 105</span></div></pre></td></tr></table></figure></p>
<p>当我们调用<code>createCounter(100)</code>的那一瞬间，对象之间的关系如下图<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_4.png" alt="img5"></p>
<p>注意<code>increment</code>和<code>get</code>函数都存有指向<code>createCounter(100) scope</code>的引用。如果<code>createCounter(100)</code>没有任何返回值，那么<code>createCounter(100) scope</code>不再被引用，于是就可以被垃圾回收。但是因为<code>createCounter(100)</code>实际上是有返回值的，并且返回值被存储在了<code>myCounter</code>中，所以对象之间的引用关系变成了如下图所示<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_5.png" alt="img6"></p>
<p>所以，<code>createCounter(100)</code>虽然已经返回了，但是它的作用域对象依然存在，可以且仅只能被嵌套的函数（<code>increment</code>和<code>get</code>）所访问。</p>
<p>让我们试着运行myCounter.get()。刚才说过，函数被调用的时候会创建一个新的作用域对象，并且该作用域对象的父作用域对象会是当前可以直接访问的作用域对象。所以，当myCounter.get()被调用时的一瞬间，对象之间的关系如下。<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_5.png" alt="img7"></p>
<p>在<code>myCounter.get()</code>运行的过程中，作用域链最底层的对象就是<code>get() scope</code>，这是一个空对象。所以，当<code>myCounter.get()</code>访问<code>counter</code>变量时，JavaScript在<code>get() scope</code>中找不到这个属性，于是就向上到<code>createCounter(100) scope</code>当中查找。然后，<code>myCounter.get()</code>将这个值返回。</p>
<p>调用<code>myCounter.increment(5)</code>的时候，事情变得更有趣了，因为这个时候函数调用的时候传入了参数。<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_6_inc.png" alt="img8"></p>
<p>正如你所见，<code>increment(5)</code>的调用创建了一个新的作用域对象，并且其中含有传入的参数<code>value</code>。当这个函数尝试访问<code>value</code>的时候，JavaScript立刻就能在当前的作用域对象找到它。然而，这个函数试图访问<code>counter</code>的时候，JavaScript无法在当前的作用域对象找到它，于是就会在其父作用域<code>createCounter(100) scope</code>中查找。</p>
<p>我们可以注意到，在<code>createCounter</code>函数之外，除了被返回的<code>get</code>和<code>increment</code>两个方法，没有其他的地方可以访问到<code>value</code>这个变量了。这就是用闭包实现“私有变量”的方法。</p>
<p>我们注意到<code>initial</code>变量也被存储在<code>createCounter()</code>所创建的作用域对象中，尽管它没有被用到。所以，我们实际上可以去掉<code>var counter = initial;</code>，将<code>initial</code>改名为<code>counter</code>。但是为了代码的可读性起见，我们保留原有的代码不做变化。</p>
<p>需要注意的是作用域链是不会被复制的。每次函数调用只会往作用域链下面新增一个作用域对象。所以，如果在函数调用的过程当中对作用域链中的任何一个作用域对象的变量进行修改的话，那么同时作用域链中也拥有该作用域对象的函数对象也是能够访问到这个变化后的变量的。</p>
<p>这也就是为什么下面这个大家都很熟悉的例子会不能产出我们想要的结果。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"myClass"</span>), i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</div><div class="line">  elems[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.innerHTML = i;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面的循环中创建了多个函数对象，所有的函数对象的<code>[[scope]]</code>都保存着对当前作用域对象的引用。而变量<code>i</code>正好就在当前作用域链中，所以循环每次对i的修改，对于每个函数对象都是能够看到的。</p>
<h2 id="“看起来一样的”函数，不一样的作用域对象"><a href="#“看起来一样的”函数，不一样的作用域对象" class="headerlink" title="“看起来一样的”函数，不一样的作用域对象"></a>“看起来一样的”函数，不一样的作用域对象</h2><p>现在我们来看一个更有趣的例子。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCounter</span>(<span class="params">initial</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myCounter1 = createCounter(<span class="number">100</span>);</div><div class="line"><span class="keyword">var</span> myCounter2 = createCounter(<span class="number">200</span>);</div></pre></td></tr></table></figure></p>
<p>当myCounter1和myCounter2被创建后，对象之间的关系为<br><img src="http://blog.leapoahead.com/2015/09/15/js-closure/js_closure_7.png" alt="img9"></p>
<p>在上面的例子中，<code>myCounter1.increment</code>和<code>myCounter2.increment</code>的函数对象拥有着一样的代码以及一样的属性值（<code>name</code>，<code>length</code>等等），但是它们的<code>[[scope]]</code>指向的是不一样的作用域对象。</p>
<p>这才有了下面的结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a, b;</div><div class="line">a = myCounter1.get();   <span class="comment">// a 等于 100</span></div><div class="line">b = myCounter2.get();   <span class="comment">// b 等于 200</span></div><div class="line">myCounter1.increment(<span class="number">1</span>);</div><div class="line">myCounter1.increment(<span class="number">2</span>);</div><div class="line">myCounter2.increment(<span class="number">5</span>);</div><div class="line">a = myCounter1.get();   <span class="comment">// a 等于 103</span></div><div class="line">b = myCounter2.get();   <span class="comment">// b 等于 205</span></div></pre></td></tr></table></figure></p>
<h2 id="作用域链和this"><a href="#作用域链和this" class="headerlink" title="作用域链和this"></a>作用域链和<code>this</code></h2><p><code>this</code>的值不会被保存在作用域链中，<code>this</code>的值取决于函数被调用的时候的情景。</p>
<blockquote>
<p>译者注：对这部分，译者自己曾经写过一篇更加详尽的文章，请参考《用自然语言的角度理解JavaScript中的this关键字》。原文的这一部分以及“this在嵌套的函数中的使用”译者便不再翻译。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>让我们来回想我们在本文开头提到的一些问题。</p>
<ul>
<li>什么是闭包？闭包就是同时含有对函数对象以及作用域对象引用的最想。实际上，所有JavaScript对象都是闭包。</li>
<li>闭包是什么时候被创建的？因为所有JavaScript对象都是闭包，因此，当你定义一个函数的时候，你就定义了一个闭包。</li>
<li>闭包是什么时候被销毁的？当它不被任何其他的对象引用的时候。</li>
</ul>
<blockquote>
<p><strong>本文转载自：<a href="http://blog.leapoahead.com/2015/09/15/js-closure/" target="_blank" rel="external">http://blog.leapoahead.com/2015/09/15/js-closure/</a></strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;How-do-JavaScript-closures-work-under-the-hood&quot;&gt;&lt;a href=&quot;#How-do-JavaScript-closures-work-under-the-hood&quot; class=&quot;headerlink&quot; title=&quot;How do JavaScript closures work under the hood&quot;&gt;&lt;/a&gt;How do JavaScript closures work under the hood&lt;/h1&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;昨天晚上看《JavaScript权威指南》正好看到闭包，此时已经是12点多，心想赶着看完睡觉，太晚睡长痘痘。结果把最后一个例子看完，大脑里还是懵的。然后又上YouTube看了下视频教程，但讲的还是有点懵，索性关机睡觉。第二天上午，赶紧上&lt;code&gt;stackoverflow&lt;/code&gt;和&lt;code&gt;quora&lt;/code&gt;搜索，结果就搜到这篇文字，写得太好了，就转载在博客里以后反复研读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我研究JavaScript闭包（closure）已经有一段时间了。我之前只是学会了如何使用它们，而没有透彻地了解它们具体是如何运作的。那么，究竟什么是闭包？&lt;/p&gt;
&lt;p&gt;Wikipedia给出的解释并没有太大的帮助。闭包是什么时候被创建的，什么时候被销毁的？具体的实现又是怎么样的？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myClosure = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outerFunction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hidden = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;inc&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;innerFunction&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; hidden++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myClosure.inc();  &lt;span class=&quot;comment&quot;&gt;// 返回 1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myClosure.inc();  &lt;span class=&quot;comment&quot;&gt;// 返回 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myClosure.inc();  &lt;span class=&quot;comment&quot;&gt;// 返回 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 相信对JS熟悉的朋友都能很快理解这段代码&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 那么在这段代码运行的背后究竟发生了怎样的事情呢？&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，我终于知道了答案，我感到很兴奋并且决定向大家解释这个答案。至少，我一定是不会忘记这个答案的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tell me and I forget. Teach me and I remember. Involve me and I learn.&lt;br&gt;© Benjamin Franklin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;并且，在我阅读与闭包相关的现存的资料时，我很努力地尝试着去在脑海中想想每个事物之间的联系：对象之间是如何引用的，对象之间的继承关系是什么，等等。我找不到关于这些负责关系的很好的图表，于是我决定自己画一些。&lt;/p&gt;
&lt;p&gt;我将假设读者对JavaScript已经比较熟悉了，知道什么是全局对象，知道函数在JavaScript当中是“first-class objects”，等等。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="JavaScript" scheme="http://jerryshi.com/tags/JavaScript/"/>
    
      <category term="niubility" scheme="http://jerryshi.com/tags/niubility/"/>
    
  </entry>
  
  <entry>
    <title>手动组建 Vue 脚手架实践 - 心得</title>
    <link href="http://jerryshi.com/2016/12/06/vue-cli-test-summary/"/>
    <id>http://jerryshi.com/2016/12/06/vue-cli-test-summary/</id>
    <published>2016-12-06T15:16:32.000Z</published>
    <updated>2016-12-06T15:25:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>It is a 流程.</p>
</blockquote>
<p>文字描述版：↓↓<br>首先运行命令<code>npm build</code>(<code>webpack -p</code>)，此命令可以理解为生成并压缩。随后webpack开始在当前目录加载<code>webpack.config.js</code>文件，其内容主要包含三大块，入口、出口和模块三部分，我们在模块module里配置各种loader，有vue-loader简写成vue，有”js”的loader,一般用babel作js的loader，当然也有css-loader。在配置babel时，需要配置<code>presets: [&#39;es2015&#39;]</code>。在<code>main.js</code>里，就是该程序的入口点，通过该js下游不停填充子组建来构造一个完整的App。</p>
<p>流程图描述版：↓↓<br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/lct.jpg" alt="lct1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;It is a 流程.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;文字描述版：↓↓&lt;br&gt;首先运行命令&lt;code&gt;npm build&lt;/code&gt;(&lt;code&gt;webpack -p&lt;/code&gt;)，此命令可以理解为生成并压缩。随后webpack开始
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="vuejs" scheme="http://jerryshi.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0 - 遇到的坑记录（长期更新）</title>
    <link href="http://jerryshi.com/2016/12/06/vue-pits/"/>
    <id>http://jerryshi.com/2016/12/06/vue-pits/</id>
    <published>2016-12-06T15:13:05.000Z</published>
    <updated>2016-12-06T15:28:20.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>第01坑：组件名<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">components: &#123;         <span class="comment">//Vue.js v2.1.4</span></div><div class="line">    <span class="string">'szyGrid'</span>: Grid   <span class="comment">//组件名不能用驼峰命名法！</span></div><div class="line">    <span class="string">'szu-Grid'</span>: Grid  <span class="comment">//组件名不能用链接符！</span></div><div class="line">    <span class="string">'szygrid'</span>: Grid   <span class="comment">//好了，pass！另外在全局里定义也只能这样！</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;第01坑：组件名&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="vuejs" scheme="http://jerryshi.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vuejs - 实例的生命周期</title>
    <link href="http://jerryshi.com/2016/12/06/vue-instance-lifecycle/"/>
    <id>http://jerryshi.com/2016/12/06/vue-instance-lifecycle/</id>
    <published>2016-12-06T15:03:08.000Z</published>
    <updated>2016-12-06T15:06:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ofx24fene.bkt.clouddn.com/img/2016/vuejs-cyc1.png" alt="vue-cyc1"></p>
<a id="more"></a>
<p><img src="http://ofx24fene.bkt.clouddn.com/img/2016/vuejs-cyc2.png" alt="vue-cyc2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ofx24fene.bkt.clouddn.com/img/2016/vuejs-cyc1.png&quot; alt=&quot;vue-cyc1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="vuejs" scheme="http://jerryshi.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>手动组建 Vue 脚手架实践</title>
    <link href="http://jerryshi.com/2016/12/01/vue-cli-test/"/>
    <id>http://jerryshi.com/2016/12/01/vue-cli-test/</id>
    <published>2016-12-01T11:13:00.000Z</published>
    <updated>2016-12-05T06:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>据说Vue-cli脚手架（全家桶）很不错，但作为初学者的我还是先从基础看起，看看脚手架的具体组建，方便以后深入学习。那么我们就开始吧！</p>
<h3 id="初始化git-repo"><a href="#初始化git-repo" class="headerlink" title="初始化git repo"></a>初始化git repo</h3><p>为了方便，我们还是新建一个repo（其实是为了以后复习代码）。我在github已经建好，名字叫：<code>vue-cli-test</code>。先cloone到本地：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/szy0syz/vue-cli-test.git vuecli</div></pre></td></tr></table></figure>
<hr>
<h3 id="vue-cli项目结构"><a href="#vue-cli项目结构" class="headerlink" title="vue-cli项目结构"></a>vue-cli项目结构</h3><p>在创建之前，先看看vue-cli脚手架的项目最小化结构：</p>
<blockquote>
<pre><code>|-- index.html
|-- main.js                入口文件
|-- App.vue                vue文件，官方推荐命名法
|-- package.json        工程文件(项目依赖、名称、配置)
|-- webpack.config.js    webpack配置文件
</code></pre></blockquote>
<p>index.html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"build.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  //此文件与webpack.config的output相对应！</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>main.js:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></div><div class="line"> </div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>:<span class="string">'body'</span>,</div><div class="line">    <span class="attr">components</span>:&#123;</div><div class="line">        <span class="attr">app</span>:App</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>package.json就不说了，工程的各种东西都在里面，很重要啦。对了，里面script里加一句：<code>&quot;dev&quot;: &quot;webpack-dev-server --inline --hot --port 8088&quot;</code>。</p>
<p>那么重点来了，webpack的配置文件webpack.config.js：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports=&#123;</div><div class="line">    <span class="attr">entry</span>:<span class="string">'./main.js'</span>,  <span class="comment">//入口</span></div><div class="line">    output:&#123;            <span class="comment">//出口</span></div><div class="line">        path:__dirname,</div><div class="line">        <span class="attr">filename</span>:<span class="string">'build.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>:&#123; <span class="comment">//主要申明以.vue后缀的文件的lloader为vue</span></div><div class="line">        loaders:[    <span class="comment">//以.js后缀的文件的loader为babel</span></div><div class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.vue$/</span>, <span class="attr">loader</span>:<span class="string">'vue'</span>&#125;,</div><div class="line">            &#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>, <span class="attr">loader</span>:<span class="string">'babel'</span>, <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>&#125;</div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">babel</span>:&#123;</div><div class="line">        <span class="attr">presets</span>:[<span class="string">'es2015'</span>],</div><div class="line">        <span class="attr">plugins</span>:[<span class="string">'transform-runtime'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>App.vue:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;h1&gt;welcome app&lt;/h1&gt;</div><div class="line">  &lt;hr&gt;</div><div class="line">  &lt;h2 @click="change"&gt;&#123;&#123;msg&#125;&#125;&lt;/hr&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  export default &#123;</div><div class="line">    data: function() &#123;</div><div class="line">      return &#123;</div><div class="line">        msg: 'webpack...'</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">    change: function() &#123;</div><div class="line">        this.msg = 'changed!!!'  </div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">  // css</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>接下来运行<code>npm run dev</code>命令，将会开始运行，得到如下截图：</p>
<p><img src="http://ofx24fene.bkt.clouddn.com/webpack01.png" alt="webpack01"></p>
<blockquote>
<p>到这里，我们的vue脚手架搭建完毕！</p>
</blockquote>
<hr>
<p>刚刚搭建完，这样的小case不足诚意，加点bootstrap做两个vue小组件玩玩啦~<br>小组件代码就不表了，贴一个<code>App.vue</code>里的代码。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">	&lt;navbar&gt;&lt;/navbar&gt;</div><div class="line">	&lt;div class="container"&gt;</div><div class="line">		&lt;jumbotron&gt;&lt;/jumbotron&gt;	</div><div class="line">	&lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  import Navbar from './components/Navbar.vue'</div><div class="line">  import Jumbotron   from './components/Jumbotron.vue'</div><div class="line">  export default &#123;</div><div class="line">    data: function() &#123;</div><div class="line">      return &#123;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">        'navbar': Navbar,</div><div class="line">        'jumbotron': Jumbotron</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style&gt;</div><div class="line">	body &#123;</div><div class="line">	  min-height: 2000px;</div><div class="line">	  padding-top: 70px;</div><div class="line">	&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>然后，我们<code>npm run dev</code>后就会得到以下结果：<br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/webpack02.jpg" alt="webpack02"></p>
<p>哈哈哈，webpack挺爽的！分析第二篇来记录吧。<font color="red">但有个问题没解决，就是如何把bootstrap和jquery也打包到build.js里？</font></p>
<p>2016-12-03更新：暂时记录下封装css代码，好像有点问题，后续更新修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>: &#123;   <span class="comment">//import './lib/bootstrap/css/bootstrap.css'</span></div><div class="line">  loaders:[</div><div class="line">    &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>) &#125;</div><div class="line">  ]</div><div class="line">&#125;,</div><div class="line"><span class="attr">plugins</span>: [</div><div class="line">      <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>)</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><blockquote>
<p>作为一个搞asm和C，玩OD和IDA的纯正后端，竟然学前端，我也是醉了。。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;据说Vue-cli脚手架（全家桶）很不错，但作为初学者的我还是先从基础看起，看看脚手架的具体组建，方便以后深入学习。那么我们就开始吧！&lt;/p&gt;
&lt;h3 id=&quot;初始化git-repo&quot;&gt;&lt;a href=&quot;#初始化git-repo&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="vuejs" scheme="http://jerryshi.com/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>一起来玩openVZ洛杉矶C3-VPS的ss</title>
    <link href="http://jerryshi.com/2016/11/30/openVZ-C3-ss-test/"/>
    <id>http://jerryshi.com/2016/11/30/openVZ-C3-ss-test/</id>
    <published>2016-11-30T08:46:03.000Z</published>
    <updated>2016-12-29T05:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天无意中又看到了一家vps服务商，名字叫openVZ/50vz，官网做呢还是有逼格呢。随即果断买一个洛杉矶C3-256M玩玩，官方直接内置锐速，这点很吸引人嘛。<br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/c3-0.png" alt="c3-0"><br>买了以后赶紧来了一个Shadowsocks Python + chacha20，然后我就有了一下测试结果。</p>
<p><img src="http://ofx24fene.bkt.clouddn.com/img/2016/c3-1.jpg" alt="c3-1"><br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/c3-2.png" alt="c3-2"></p>
<blockquote>
<p>速度喜人啊，后续就是时间验证稳定性。</p>
</blockquote>
<hr>
<p><img src="http://ofx24fene.bkt.clouddn.com/img/2016/haha01.jpg" alt="haha01"><br><strong>不对，似乎我都有儿子了！^_^</strong></p>
<hr>
<p>2016年12月28日：<br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/Image.png" alt="timeok"></p>
<hr>
<p>2016年12月29日：(好雄起）<br><img src="http://ofx24fene.bkt.clouddn.com/img/2016/vs2.png" alt="timeok2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天无意中又看到了一家vps服务商，名字叫openVZ/50vz，官网做呢还是有逼格呢。随即果断买一个洛杉矶C3-256M玩玩，官方直接内置锐速，这点很吸引人嘛。&lt;br&gt;&lt;img src=&quot;http://ofx24fene.bkt.clouddn.com/img/2016/
    
    </summary>
    
      <category term="技术" scheme="http://jerryshi.com/categories/tech/"/>
    
    
      <category term="vps" scheme="http://jerryshi.com/tags/vps/"/>
    
  </entry>
  
</feed>
